Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> collection
Rule 1     collection -> sequence
Rule 2     collection -> map
Rule 3     collection -> flow_collection
Rule 4     doc -> collection
Rule 5     doc -> scalar
Rule 6     doc -> DOC_START doc DOC_END
Rule 7     doc -> DOC_START doc
Rule 8     doc -> INDENT doc DEDENT
Rule 9     docs -> docs doc
Rule 10    docs -> doc
Rule 11    flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END
Rule 12    flow_collection -> F_MAP_START flow_map F_MAP_END
Rule 13    flow_map -> flow_map F_SEP flow_map_item
Rule 14    flow_map -> flow_map_item
Rule 15    flow_map_item -> flow_map_item_key flow_map_item_value
Rule 16    flow_map_item_key -> scalar F_MAP_KEY
Rule 17    flow_map_item_value -> scalar
Rule 18    flow_sequence -> flow_sequence F_SEP flow_sequence_item
Rule 19    flow_sequence -> flow_sequence_item
Rule 20    flow_sequence_item -> scalar
Rule 21    map -> map map_item
Rule 22    map -> map_item
Rule 23    map_item -> map_item_key map_item_value
Rule 24    map_item_key -> B_MAP_KEY INDENT collection DEDENT
Rule 25    map_item_value -> B_MAP_VALUE INDENT collection DEDENT
Rule 26    map_item -> B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT
Rule 27    map_item_key -> B_MAP_COMPACT_KEY collection DEDENT
Rule 28    map_item_value -> B_MAP_COMPACT_VALUE collection DEDENT
Rule 29    sequence_item -> B_SEQUENCE_COMPACT_START collection DEDENT
Rule 30    map_item_key -> scalar
Rule 31    map_item_key -> B_MAP_KEY scalar
Rule 32    map_item_value -> B_MAP_VALUE flow_collection
Rule 33    map_item_value -> B_MAP_VALUE scalar
Rule 34    scalar -> SCALAR
Rule 35    scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
Rule 36    scalar -> CAST_TYPE scalar
Rule 37    scalar -> B_FOLD_START scalar_group B_FOLD_END
Rule 38    scalar -> INDENT scalar_group DEDENT
Rule 39    scalar -> B_LITERAL_START scalar_group B_LITERAL_END
Rule 40    scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END
Rule 41    scalar -> SINGLEQUOTE_START SINGLEQUOTE_END
Rule 42    scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END
Rule 43    scalar_group -> SCALAR
Rule 44    scalar_group -> scalar_group SCALAR
Rule 45    sequence -> sequence sequence_item
Rule 46    sequence -> sequence_item
Rule 47    sequence_item -> B_SEQUENCE_START INDENT collection DEDENT
Rule 48    sequence_item -> B_SEQUENCE_START flow_collection
Rule 49    sequence_item -> B_SEQUENCE_START scalar

Terminals, with rules where they appear

B_FOLD_END           : 37
B_FOLD_START         : 37
B_LITERAL_END        : 39
B_LITERAL_START      : 39
B_MAP_COMPACT_KEY    : 26 27
B_MAP_COMPACT_VALUE  : 28
B_MAP_KEY            : 24 31
B_MAP_VALUE          : 25 26 32 33
B_SEQUENCE_COMPACT_START : 29
B_SEQUENCE_START     : 47 48 49
CAST_TYPE            : 36
DEDENT               : 8 24 25 26 27 28 29 38 47
DOC_END              : 6
DOC_START            : 6 7
DOUBLEQUOTE_END      : 35 40
DOUBLEQUOTE_START    : 35 40
F_MAP_END            : 12
F_MAP_KEY            : 16
F_MAP_START          : 12
F_SEP                : 13 18
F_SEQUENCE_END       : 11
F_SEQUENCE_START     : 11
INDENT               : 8 24 25 38 47
SCALAR               : 34 35 42 43 44
SINGLEQUOTE_END      : 41 42
SINGLEQUOTE_START    : 41 42
error                : 

Nonterminals, with rules where they appear

collection           : 4 24 25 27 28 29 47 0
doc                  : 6 7 8 9 10
docs                 : 9
flow_collection      : 3 32 48
flow_map             : 12 13
flow_map_item        : 13 14
flow_map_item_key    : 15
flow_map_item_value  : 15
flow_sequence        : 11 18
flow_sequence_item   : 18 19
map                  : 2 21
map_item             : 21 22
map_item_key         : 23
map_item_value       : 23
scalar               : 5 16 17 20 26 26 30 31 33 36 49
scalar_group         : 37 38 39 44
sequence             : 1 45
sequence_item        : 45 46

Parsing method: LALR

state 0

    (0) S' -> . collection
    (1) collection -> . sequence
    (2) collection -> . map
    (3) collection -> . flow_collection
    (45) sequence -> . sequence sequence_item
    (46) sequence -> . sequence_item
    (21) map -> . map map_item
    (22) map -> . map_item
    (11) flow_collection -> . F_SEQUENCE_START flow_sequence F_SEQUENCE_END
    (12) flow_collection -> . F_MAP_START flow_map F_MAP_END
    (29) sequence_item -> . B_SEQUENCE_COMPACT_START collection DEDENT
    (47) sequence_item -> . B_SEQUENCE_START INDENT collection DEDENT
    (48) sequence_item -> . B_SEQUENCE_START flow_collection
    (49) sequence_item -> . B_SEQUENCE_START scalar
    (23) map_item -> . map_item_key map_item_value
    (26) map_item -> . B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT
    (24) map_item_key -> . B_MAP_KEY INDENT collection DEDENT
    (27) map_item_key -> . B_MAP_COMPACT_KEY collection DEDENT
    (30) map_item_key -> . scalar
    (31) map_item_key -> . B_MAP_KEY scalar
    (34) scalar -> . SCALAR
    (35) scalar -> . DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
    (36) scalar -> . CAST_TYPE scalar
    (37) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (38) scalar -> . INDENT scalar_group DEDENT
    (39) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (40) scalar -> . DOUBLEQUOTE_START DOUBLEQUOTE_END
    (41) scalar -> . SINGLEQUOTE_START SINGLEQUOTE_END
    (42) scalar -> . SINGLEQUOTE_START SCALAR SINGLEQUOTE_END

    F_SEQUENCE_START shift and go to state 17
    F_MAP_START     shift and go to state 20
    B_SEQUENCE_COMPACT_START shift and go to state 18
    B_SEQUENCE_START shift and go to state 9
    B_MAP_COMPACT_KEY shift and go to state 3
    B_MAP_KEY       shift and go to state 10
    SCALAR          shift and go to state 13
    DOUBLEQUOTE_START shift and go to state 16
    CAST_TYPE       shift and go to state 19
    B_FOLD_START    shift and go to state 2
    INDENT          shift and go to state 15
    B_LITERAL_START shift and go to state 21
    SINGLEQUOTE_START shift and go to state 8

    map                            shift and go to state 11
    sequence                       shift and go to state 1
    map_item_key                   shift and go to state 6
    collection                     shift and go to state 12
    scalar                         shift and go to state 4
    flow_collection                shift and go to state 14
    sequence_item                  shift and go to state 5
    map_item                       shift and go to state 7

state 1

    (1) collection -> sequence .
    (45) sequence -> sequence . sequence_item
    (29) sequence_item -> . B_SEQUENCE_COMPACT_START collection DEDENT
    (47) sequence_item -> . B_SEQUENCE_START INDENT collection DEDENT
    (48) sequence_item -> . B_SEQUENCE_START flow_collection
    (49) sequence_item -> . B_SEQUENCE_START scalar

    DEDENT          reduce using rule 1 (collection -> sequence .)
    $end            reduce using rule 1 (collection -> sequence .)
    B_SEQUENCE_COMPACT_START shift and go to state 18
    B_SEQUENCE_START shift and go to state 9

    sequence_item                  shift and go to state 22

state 2

    (37) scalar -> B_FOLD_START . scalar_group B_FOLD_END
    (43) scalar_group -> . SCALAR
    (44) scalar_group -> . scalar_group SCALAR

    SCALAR          shift and go to state 23

    scalar_group                   shift and go to state 24

state 3

    (26) map_item -> B_MAP_COMPACT_KEY . scalar B_MAP_VALUE scalar DEDENT
    (27) map_item_key -> B_MAP_COMPACT_KEY . collection DEDENT
    (34) scalar -> . SCALAR
    (35) scalar -> . DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
    (36) scalar -> . CAST_TYPE scalar
    (37) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (38) scalar -> . INDENT scalar_group DEDENT
    (39) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (40) scalar -> . DOUBLEQUOTE_START DOUBLEQUOTE_END
    (41) scalar -> . SINGLEQUOTE_START SINGLEQUOTE_END
    (42) scalar -> . SINGLEQUOTE_START SCALAR SINGLEQUOTE_END
    (1) collection -> . sequence
    (2) collection -> . map
    (3) collection -> . flow_collection
    (45) sequence -> . sequence sequence_item
    (46) sequence -> . sequence_item
    (21) map -> . map map_item
    (22) map -> . map_item
    (11) flow_collection -> . F_SEQUENCE_START flow_sequence F_SEQUENCE_END
    (12) flow_collection -> . F_MAP_START flow_map F_MAP_END
    (29) sequence_item -> . B_SEQUENCE_COMPACT_START collection DEDENT
    (47) sequence_item -> . B_SEQUENCE_START INDENT collection DEDENT
    (48) sequence_item -> . B_SEQUENCE_START flow_collection
    (49) sequence_item -> . B_SEQUENCE_START scalar
    (23) map_item -> . map_item_key map_item_value
    (26) map_item -> . B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT
    (24) map_item_key -> . B_MAP_KEY INDENT collection DEDENT
    (27) map_item_key -> . B_MAP_COMPACT_KEY collection DEDENT
    (30) map_item_key -> . scalar
    (31) map_item_key -> . B_MAP_KEY scalar

    SCALAR          shift and go to state 13
    DOUBLEQUOTE_START shift and go to state 16
    CAST_TYPE       shift and go to state 19
    B_FOLD_START    shift and go to state 2
    INDENT          shift and go to state 15
    B_LITERAL_START shift and go to state 21
    SINGLEQUOTE_START shift and go to state 8
    F_SEQUENCE_START shift and go to state 17
    F_MAP_START     shift and go to state 20
    B_SEQUENCE_COMPACT_START shift and go to state 18
    B_SEQUENCE_START shift and go to state 9
    B_MAP_COMPACT_KEY shift and go to state 3
    B_MAP_KEY       shift and go to state 10

    map                            shift and go to state 11
    sequence                       shift and go to state 1
    map_item                       shift and go to state 7
    map_item_key                   shift and go to state 6
    collection                     shift and go to state 26
    scalar                         shift and go to state 25
    flow_collection                shift and go to state 14
    sequence_item                  shift and go to state 5

state 4

    (30) map_item_key -> scalar .

    B_MAP_VALUE     reduce using rule 30 (map_item_key -> scalar .)
    B_MAP_COMPACT_VALUE reduce using rule 30 (map_item_key -> scalar .)


state 5

    (46) sequence -> sequence_item .

    B_SEQUENCE_COMPACT_START reduce using rule 46 (sequence -> sequence_item .)
    B_SEQUENCE_START reduce using rule 46 (sequence -> sequence_item .)
    DEDENT          reduce using rule 46 (sequence -> sequence_item .)
    $end            reduce using rule 46 (sequence -> sequence_item .)


state 6

    (23) map_item -> map_item_key . map_item_value
    (25) map_item_value -> . B_MAP_VALUE INDENT collection DEDENT
    (28) map_item_value -> . B_MAP_COMPACT_VALUE collection DEDENT
    (32) map_item_value -> . B_MAP_VALUE flow_collection
    (33) map_item_value -> . B_MAP_VALUE scalar

    B_MAP_VALUE     shift and go to state 28
    B_MAP_COMPACT_VALUE shift and go to state 27

    map_item_value                 shift and go to state 29

state 7

    (22) map -> map_item .

    B_MAP_COMPACT_KEY reduce using rule 22 (map -> map_item .)
    B_MAP_KEY       reduce using rule 22 (map -> map_item .)
    SCALAR          reduce using rule 22 (map -> map_item .)
    DOUBLEQUOTE_START reduce using rule 22 (map -> map_item .)
    CAST_TYPE       reduce using rule 22 (map -> map_item .)
    B_FOLD_START    reduce using rule 22 (map -> map_item .)
    INDENT          reduce using rule 22 (map -> map_item .)
    B_LITERAL_START reduce using rule 22 (map -> map_item .)
    SINGLEQUOTE_START reduce using rule 22 (map -> map_item .)
    $end            reduce using rule 22 (map -> map_item .)
    DEDENT          reduce using rule 22 (map -> map_item .)


state 8

    (41) scalar -> SINGLEQUOTE_START . SINGLEQUOTE_END
    (42) scalar -> SINGLEQUOTE_START . SCALAR SINGLEQUOTE_END

    SINGLEQUOTE_END shift and go to state 30
    SCALAR          shift and go to state 31


state 9

    (47) sequence_item -> B_SEQUENCE_START . INDENT collection DEDENT
    (48) sequence_item -> B_SEQUENCE_START . flow_collection
    (49) sequence_item -> B_SEQUENCE_START . scalar
    (11) flow_collection -> . F_SEQUENCE_START flow_sequence F_SEQUENCE_END
    (12) flow_collection -> . F_MAP_START flow_map F_MAP_END
    (34) scalar -> . SCALAR
    (35) scalar -> . DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
    (36) scalar -> . CAST_TYPE scalar
    (37) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (38) scalar -> . INDENT scalar_group DEDENT
    (39) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (40) scalar -> . DOUBLEQUOTE_START DOUBLEQUOTE_END
    (41) scalar -> . SINGLEQUOTE_START SINGLEQUOTE_END
    (42) scalar -> . SINGLEQUOTE_START SCALAR SINGLEQUOTE_END

    INDENT          shift and go to state 34
    F_SEQUENCE_START shift and go to state 17
    F_MAP_START     shift and go to state 20
    SCALAR          shift and go to state 13
    DOUBLEQUOTE_START shift and go to state 16
    CAST_TYPE       shift and go to state 19
    B_FOLD_START    shift and go to state 2
    B_LITERAL_START shift and go to state 21
    SINGLEQUOTE_START shift and go to state 8

    scalar                         shift and go to state 32
    flow_collection                shift and go to state 33

state 10

    (24) map_item_key -> B_MAP_KEY . INDENT collection DEDENT
    (31) map_item_key -> B_MAP_KEY . scalar
    (34) scalar -> . SCALAR
    (35) scalar -> . DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
    (36) scalar -> . CAST_TYPE scalar
    (37) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (38) scalar -> . INDENT scalar_group DEDENT
    (39) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (40) scalar -> . DOUBLEQUOTE_START DOUBLEQUOTE_END
    (41) scalar -> . SINGLEQUOTE_START SINGLEQUOTE_END
    (42) scalar -> . SINGLEQUOTE_START SCALAR SINGLEQUOTE_END

    INDENT          shift and go to state 35
    SCALAR          shift and go to state 13
    DOUBLEQUOTE_START shift and go to state 16
    CAST_TYPE       shift and go to state 19
    B_FOLD_START    shift and go to state 2
    B_LITERAL_START shift and go to state 21
    SINGLEQUOTE_START shift and go to state 8

    scalar                         shift and go to state 36

state 11

    (2) collection -> map .
    (21) map -> map . map_item
    (23) map_item -> . map_item_key map_item_value
    (26) map_item -> . B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT
    (24) map_item_key -> . B_MAP_KEY INDENT collection DEDENT
    (27) map_item_key -> . B_MAP_COMPACT_KEY collection DEDENT
    (30) map_item_key -> . scalar
    (31) map_item_key -> . B_MAP_KEY scalar
    (34) scalar -> . SCALAR
    (35) scalar -> . DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
    (36) scalar -> . CAST_TYPE scalar
    (37) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (38) scalar -> . INDENT scalar_group DEDENT
    (39) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (40) scalar -> . DOUBLEQUOTE_START DOUBLEQUOTE_END
    (41) scalar -> . SINGLEQUOTE_START SINGLEQUOTE_END
    (42) scalar -> . SINGLEQUOTE_START SCALAR SINGLEQUOTE_END

    DEDENT          reduce using rule 2 (collection -> map .)
    $end            reduce using rule 2 (collection -> map .)
    B_MAP_COMPACT_KEY shift and go to state 3
    B_MAP_KEY       shift and go to state 10
    SCALAR          shift and go to state 13
    DOUBLEQUOTE_START shift and go to state 16
    CAST_TYPE       shift and go to state 19
    B_FOLD_START    shift and go to state 2
    INDENT          shift and go to state 15
    B_LITERAL_START shift and go to state 21
    SINGLEQUOTE_START shift and go to state 8

    map_item                       shift and go to state 37
    scalar                         shift and go to state 4
    map_item_key                   shift and go to state 6

state 12

    (0) S' -> collection .



state 13

    (34) scalar -> SCALAR .

    B_MAP_VALUE     reduce using rule 34 (scalar -> SCALAR .)
    B_MAP_COMPACT_VALUE reduce using rule 34 (scalar -> SCALAR .)
    F_SEQUENCE_END  reduce using rule 34 (scalar -> SCALAR .)
    F_SEP           reduce using rule 34 (scalar -> SCALAR .)
    B_SEQUENCE_COMPACT_START reduce using rule 34 (scalar -> SCALAR .)
    B_SEQUENCE_START reduce using rule 34 (scalar -> SCALAR .)
    $end            reduce using rule 34 (scalar -> SCALAR .)
    DEDENT          reduce using rule 34 (scalar -> SCALAR .)
    F_MAP_KEY       reduce using rule 34 (scalar -> SCALAR .)
    B_MAP_COMPACT_KEY reduce using rule 34 (scalar -> SCALAR .)
    B_MAP_KEY       reduce using rule 34 (scalar -> SCALAR .)
    SCALAR          reduce using rule 34 (scalar -> SCALAR .)
    DOUBLEQUOTE_START reduce using rule 34 (scalar -> SCALAR .)
    CAST_TYPE       reduce using rule 34 (scalar -> SCALAR .)
    B_FOLD_START    reduce using rule 34 (scalar -> SCALAR .)
    INDENT          reduce using rule 34 (scalar -> SCALAR .)
    B_LITERAL_START reduce using rule 34 (scalar -> SCALAR .)
    SINGLEQUOTE_START reduce using rule 34 (scalar -> SCALAR .)
    F_MAP_END       reduce using rule 34 (scalar -> SCALAR .)


state 14

    (3) collection -> flow_collection .

    DEDENT          reduce using rule 3 (collection -> flow_collection .)
    $end            reduce using rule 3 (collection -> flow_collection .)


state 15

    (38) scalar -> INDENT . scalar_group DEDENT
    (43) scalar_group -> . SCALAR
    (44) scalar_group -> . scalar_group SCALAR

    SCALAR          shift and go to state 23

    scalar_group                   shift and go to state 38

state 16

    (35) scalar -> DOUBLEQUOTE_START . SCALAR DOUBLEQUOTE_END
    (40) scalar -> DOUBLEQUOTE_START . DOUBLEQUOTE_END

    SCALAR          shift and go to state 40
    DOUBLEQUOTE_END shift and go to state 39


state 17

    (11) flow_collection -> F_SEQUENCE_START . flow_sequence F_SEQUENCE_END
    (18) flow_sequence -> . flow_sequence F_SEP flow_sequence_item
    (19) flow_sequence -> . flow_sequence_item
    (20) flow_sequence_item -> . scalar
    (34) scalar -> . SCALAR
    (35) scalar -> . DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
    (36) scalar -> . CAST_TYPE scalar
    (37) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (38) scalar -> . INDENT scalar_group DEDENT
    (39) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (40) scalar -> . DOUBLEQUOTE_START DOUBLEQUOTE_END
    (41) scalar -> . SINGLEQUOTE_START SINGLEQUOTE_END
    (42) scalar -> . SINGLEQUOTE_START SCALAR SINGLEQUOTE_END

    SCALAR          shift and go to state 13
    DOUBLEQUOTE_START shift and go to state 16
    CAST_TYPE       shift and go to state 19
    B_FOLD_START    shift and go to state 2
    INDENT          shift and go to state 15
    B_LITERAL_START shift and go to state 21
    SINGLEQUOTE_START shift and go to state 8

    flow_sequence_item             shift and go to state 41
    scalar                         shift and go to state 42
    flow_sequence                  shift and go to state 43

state 18

    (29) sequence_item -> B_SEQUENCE_COMPACT_START . collection DEDENT
    (1) collection -> . sequence
    (2) collection -> . map
    (3) collection -> . flow_collection
    (45) sequence -> . sequence sequence_item
    (46) sequence -> . sequence_item
    (21) map -> . map map_item
    (22) map -> . map_item
    (11) flow_collection -> . F_SEQUENCE_START flow_sequence F_SEQUENCE_END
    (12) flow_collection -> . F_MAP_START flow_map F_MAP_END
    (29) sequence_item -> . B_SEQUENCE_COMPACT_START collection DEDENT
    (47) sequence_item -> . B_SEQUENCE_START INDENT collection DEDENT
    (48) sequence_item -> . B_SEQUENCE_START flow_collection
    (49) sequence_item -> . B_SEQUENCE_START scalar
    (23) map_item -> . map_item_key map_item_value
    (26) map_item -> . B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT
    (24) map_item_key -> . B_MAP_KEY INDENT collection DEDENT
    (27) map_item_key -> . B_MAP_COMPACT_KEY collection DEDENT
    (30) map_item_key -> . scalar
    (31) map_item_key -> . B_MAP_KEY scalar
    (34) scalar -> . SCALAR
    (35) scalar -> . DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
    (36) scalar -> . CAST_TYPE scalar
    (37) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (38) scalar -> . INDENT scalar_group DEDENT
    (39) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (40) scalar -> . DOUBLEQUOTE_START DOUBLEQUOTE_END
    (41) scalar -> . SINGLEQUOTE_START SINGLEQUOTE_END
    (42) scalar -> . SINGLEQUOTE_START SCALAR SINGLEQUOTE_END

    F_SEQUENCE_START shift and go to state 17
    F_MAP_START     shift and go to state 20
    B_SEQUENCE_COMPACT_START shift and go to state 18
    B_SEQUENCE_START shift and go to state 9
    B_MAP_COMPACT_KEY shift and go to state 3
    B_MAP_KEY       shift and go to state 10
    SCALAR          shift and go to state 13
    DOUBLEQUOTE_START shift and go to state 16
    CAST_TYPE       shift and go to state 19
    B_FOLD_START    shift and go to state 2
    INDENT          shift and go to state 15
    B_LITERAL_START shift and go to state 21
    SINGLEQUOTE_START shift and go to state 8

    map                            shift and go to state 11
    sequence                       shift and go to state 1
    map_item_key                   shift and go to state 6
    collection                     shift and go to state 44
    scalar                         shift and go to state 4
    flow_collection                shift and go to state 14
    sequence_item                  shift and go to state 5
    map_item                       shift and go to state 7

state 19

    (36) scalar -> CAST_TYPE . scalar
    (34) scalar -> . SCALAR
    (35) scalar -> . DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
    (36) scalar -> . CAST_TYPE scalar
    (37) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (38) scalar -> . INDENT scalar_group DEDENT
    (39) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (40) scalar -> . DOUBLEQUOTE_START DOUBLEQUOTE_END
    (41) scalar -> . SINGLEQUOTE_START SINGLEQUOTE_END
    (42) scalar -> . SINGLEQUOTE_START SCALAR SINGLEQUOTE_END

    SCALAR          shift and go to state 13
    DOUBLEQUOTE_START shift and go to state 16
    CAST_TYPE       shift and go to state 19
    B_FOLD_START    shift and go to state 2
    INDENT          shift and go to state 15
    B_LITERAL_START shift and go to state 21
    SINGLEQUOTE_START shift and go to state 8

    scalar                         shift and go to state 45

state 20

    (12) flow_collection -> F_MAP_START . flow_map F_MAP_END
    (13) flow_map -> . flow_map F_SEP flow_map_item
    (14) flow_map -> . flow_map_item
    (15) flow_map_item -> . flow_map_item_key flow_map_item_value
    (16) flow_map_item_key -> . scalar F_MAP_KEY
    (34) scalar -> . SCALAR
    (35) scalar -> . DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
    (36) scalar -> . CAST_TYPE scalar
    (37) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (38) scalar -> . INDENT scalar_group DEDENT
    (39) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (40) scalar -> . DOUBLEQUOTE_START DOUBLEQUOTE_END
    (41) scalar -> . SINGLEQUOTE_START SINGLEQUOTE_END
    (42) scalar -> . SINGLEQUOTE_START SCALAR SINGLEQUOTE_END

    SCALAR          shift and go to state 13
    DOUBLEQUOTE_START shift and go to state 16
    CAST_TYPE       shift and go to state 19
    B_FOLD_START    shift and go to state 2
    INDENT          shift and go to state 15
    B_LITERAL_START shift and go to state 21
    SINGLEQUOTE_START shift and go to state 8

    flow_map                       shift and go to state 48
    flow_map_item                  shift and go to state 49
    flow_map_item_key              shift and go to state 46
    scalar                         shift and go to state 47

state 21

    (39) scalar -> B_LITERAL_START . scalar_group B_LITERAL_END
    (43) scalar_group -> . SCALAR
    (44) scalar_group -> . scalar_group SCALAR

    SCALAR          shift and go to state 23

    scalar_group                   shift and go to state 50

state 22

    (45) sequence -> sequence sequence_item .

    B_SEQUENCE_COMPACT_START reduce using rule 45 (sequence -> sequence sequence_item .)
    B_SEQUENCE_START reduce using rule 45 (sequence -> sequence sequence_item .)
    DEDENT          reduce using rule 45 (sequence -> sequence sequence_item .)
    $end            reduce using rule 45 (sequence -> sequence sequence_item .)


state 23

    (43) scalar_group -> SCALAR .

    B_FOLD_END      reduce using rule 43 (scalar_group -> SCALAR .)
    SCALAR          reduce using rule 43 (scalar_group -> SCALAR .)
    DEDENT          reduce using rule 43 (scalar_group -> SCALAR .)
    B_LITERAL_END   reduce using rule 43 (scalar_group -> SCALAR .)


state 24

    (37) scalar -> B_FOLD_START scalar_group . B_FOLD_END
    (44) scalar_group -> scalar_group . SCALAR

    B_FOLD_END      shift and go to state 52
    SCALAR          shift and go to state 51


state 25

    (26) map_item -> B_MAP_COMPACT_KEY scalar . B_MAP_VALUE scalar DEDENT
    (30) map_item_key -> scalar .

  ! shift/reduce conflict for B_MAP_VALUE resolved as shift
    B_MAP_VALUE     shift and go to state 53
    B_MAP_COMPACT_VALUE reduce using rule 30 (map_item_key -> scalar .)

  ! B_MAP_VALUE     [ reduce using rule 30 (map_item_key -> scalar .) ]


state 26

    (27) map_item_key -> B_MAP_COMPACT_KEY collection . DEDENT

    DEDENT          shift and go to state 54


state 27

    (28) map_item_value -> B_MAP_COMPACT_VALUE . collection DEDENT
    (1) collection -> . sequence
    (2) collection -> . map
    (3) collection -> . flow_collection
    (45) sequence -> . sequence sequence_item
    (46) sequence -> . sequence_item
    (21) map -> . map map_item
    (22) map -> . map_item
    (11) flow_collection -> . F_SEQUENCE_START flow_sequence F_SEQUENCE_END
    (12) flow_collection -> . F_MAP_START flow_map F_MAP_END
    (29) sequence_item -> . B_SEQUENCE_COMPACT_START collection DEDENT
    (47) sequence_item -> . B_SEQUENCE_START INDENT collection DEDENT
    (48) sequence_item -> . B_SEQUENCE_START flow_collection
    (49) sequence_item -> . B_SEQUENCE_START scalar
    (23) map_item -> . map_item_key map_item_value
    (26) map_item -> . B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT
    (24) map_item_key -> . B_MAP_KEY INDENT collection DEDENT
    (27) map_item_key -> . B_MAP_COMPACT_KEY collection DEDENT
    (30) map_item_key -> . scalar
    (31) map_item_key -> . B_MAP_KEY scalar
    (34) scalar -> . SCALAR
    (35) scalar -> . DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
    (36) scalar -> . CAST_TYPE scalar
    (37) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (38) scalar -> . INDENT scalar_group DEDENT
    (39) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (40) scalar -> . DOUBLEQUOTE_START DOUBLEQUOTE_END
    (41) scalar -> . SINGLEQUOTE_START SINGLEQUOTE_END
    (42) scalar -> . SINGLEQUOTE_START SCALAR SINGLEQUOTE_END

    F_SEQUENCE_START shift and go to state 17
    F_MAP_START     shift and go to state 20
    B_SEQUENCE_COMPACT_START shift and go to state 18
    B_SEQUENCE_START shift and go to state 9
    B_MAP_COMPACT_KEY shift and go to state 3
    B_MAP_KEY       shift and go to state 10
    SCALAR          shift and go to state 13
    DOUBLEQUOTE_START shift and go to state 16
    CAST_TYPE       shift and go to state 19
    B_FOLD_START    shift and go to state 2
    INDENT          shift and go to state 15
    B_LITERAL_START shift and go to state 21
    SINGLEQUOTE_START shift and go to state 8

    map                            shift and go to state 11
    sequence                       shift and go to state 1
    map_item_key                   shift and go to state 6
    collection                     shift and go to state 55
    scalar                         shift and go to state 4
    flow_collection                shift and go to state 14
    sequence_item                  shift and go to state 5
    map_item                       shift and go to state 7

state 28

    (25) map_item_value -> B_MAP_VALUE . INDENT collection DEDENT
    (32) map_item_value -> B_MAP_VALUE . flow_collection
    (33) map_item_value -> B_MAP_VALUE . scalar
    (11) flow_collection -> . F_SEQUENCE_START flow_sequence F_SEQUENCE_END
    (12) flow_collection -> . F_MAP_START flow_map F_MAP_END
    (34) scalar -> . SCALAR
    (35) scalar -> . DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
    (36) scalar -> . CAST_TYPE scalar
    (37) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (38) scalar -> . INDENT scalar_group DEDENT
    (39) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (40) scalar -> . DOUBLEQUOTE_START DOUBLEQUOTE_END
    (41) scalar -> . SINGLEQUOTE_START SINGLEQUOTE_END
    (42) scalar -> . SINGLEQUOTE_START SCALAR SINGLEQUOTE_END

    INDENT          shift and go to state 58
    F_SEQUENCE_START shift and go to state 17
    F_MAP_START     shift and go to state 20
    SCALAR          shift and go to state 13
    DOUBLEQUOTE_START shift and go to state 16
    CAST_TYPE       shift and go to state 19
    B_FOLD_START    shift and go to state 2
    B_LITERAL_START shift and go to state 21
    SINGLEQUOTE_START shift and go to state 8

    scalar                         shift and go to state 56
    flow_collection                shift and go to state 57

state 29

    (23) map_item -> map_item_key map_item_value .

    B_MAP_COMPACT_KEY reduce using rule 23 (map_item -> map_item_key map_item_value .)
    B_MAP_KEY       reduce using rule 23 (map_item -> map_item_key map_item_value .)
    SCALAR          reduce using rule 23 (map_item -> map_item_key map_item_value .)
    DOUBLEQUOTE_START reduce using rule 23 (map_item -> map_item_key map_item_value .)
    CAST_TYPE       reduce using rule 23 (map_item -> map_item_key map_item_value .)
    B_FOLD_START    reduce using rule 23 (map_item -> map_item_key map_item_value .)
    INDENT          reduce using rule 23 (map_item -> map_item_key map_item_value .)
    B_LITERAL_START reduce using rule 23 (map_item -> map_item_key map_item_value .)
    SINGLEQUOTE_START reduce using rule 23 (map_item -> map_item_key map_item_value .)
    $end            reduce using rule 23 (map_item -> map_item_key map_item_value .)
    DEDENT          reduce using rule 23 (map_item -> map_item_key map_item_value .)


state 30

    (41) scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .

    B_MAP_VALUE     reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)
    B_MAP_COMPACT_VALUE reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)
    F_SEQUENCE_END  reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)
    F_SEP           reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)
    B_SEQUENCE_COMPACT_START reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)
    B_SEQUENCE_START reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)
    $end            reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)
    DEDENT          reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)
    F_MAP_KEY       reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)
    B_MAP_COMPACT_KEY reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)
    B_MAP_KEY       reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)
    SCALAR          reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)
    DOUBLEQUOTE_START reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)
    CAST_TYPE       reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)
    B_FOLD_START    reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)
    INDENT          reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)
    B_LITERAL_START reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)
    SINGLEQUOTE_START reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)
    F_MAP_END       reduce using rule 41 (scalar -> SINGLEQUOTE_START SINGLEQUOTE_END .)


state 31

    (42) scalar -> SINGLEQUOTE_START SCALAR . SINGLEQUOTE_END

    SINGLEQUOTE_END shift and go to state 59


state 32

    (49) sequence_item -> B_SEQUENCE_START scalar .

    B_SEQUENCE_COMPACT_START reduce using rule 49 (sequence_item -> B_SEQUENCE_START scalar .)
    B_SEQUENCE_START reduce using rule 49 (sequence_item -> B_SEQUENCE_START scalar .)
    $end            reduce using rule 49 (sequence_item -> B_SEQUENCE_START scalar .)
    DEDENT          reduce using rule 49 (sequence_item -> B_SEQUENCE_START scalar .)


state 33

    (48) sequence_item -> B_SEQUENCE_START flow_collection .

    B_SEQUENCE_COMPACT_START reduce using rule 48 (sequence_item -> B_SEQUENCE_START flow_collection .)
    B_SEQUENCE_START reduce using rule 48 (sequence_item -> B_SEQUENCE_START flow_collection .)
    $end            reduce using rule 48 (sequence_item -> B_SEQUENCE_START flow_collection .)
    DEDENT          reduce using rule 48 (sequence_item -> B_SEQUENCE_START flow_collection .)


state 34

    (47) sequence_item -> B_SEQUENCE_START INDENT . collection DEDENT
    (38) scalar -> INDENT . scalar_group DEDENT
    (1) collection -> . sequence
    (2) collection -> . map
    (3) collection -> . flow_collection
    (43) scalar_group -> . SCALAR
    (44) scalar_group -> . scalar_group SCALAR
    (45) sequence -> . sequence sequence_item
    (46) sequence -> . sequence_item
    (21) map -> . map map_item
    (22) map -> . map_item
    (11) flow_collection -> . F_SEQUENCE_START flow_sequence F_SEQUENCE_END
    (12) flow_collection -> . F_MAP_START flow_map F_MAP_END
    (29) sequence_item -> . B_SEQUENCE_COMPACT_START collection DEDENT
    (47) sequence_item -> . B_SEQUENCE_START INDENT collection DEDENT
    (48) sequence_item -> . B_SEQUENCE_START flow_collection
    (49) sequence_item -> . B_SEQUENCE_START scalar
    (23) map_item -> . map_item_key map_item_value
    (26) map_item -> . B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT
    (24) map_item_key -> . B_MAP_KEY INDENT collection DEDENT
    (27) map_item_key -> . B_MAP_COMPACT_KEY collection DEDENT
    (30) map_item_key -> . scalar
    (31) map_item_key -> . B_MAP_KEY scalar
    (34) scalar -> . SCALAR
    (35) scalar -> . DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
    (36) scalar -> . CAST_TYPE scalar
    (37) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (38) scalar -> . INDENT scalar_group DEDENT
    (39) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (40) scalar -> . DOUBLEQUOTE_START DOUBLEQUOTE_END
    (41) scalar -> . SINGLEQUOTE_START SINGLEQUOTE_END
    (42) scalar -> . SINGLEQUOTE_START SCALAR SINGLEQUOTE_END

    SCALAR          shift and go to state 61
    F_SEQUENCE_START shift and go to state 17
    F_MAP_START     shift and go to state 20
    B_SEQUENCE_COMPACT_START shift and go to state 18
    B_SEQUENCE_START shift and go to state 9
    B_MAP_COMPACT_KEY shift and go to state 3
    B_MAP_KEY       shift and go to state 10
    DOUBLEQUOTE_START shift and go to state 16
    CAST_TYPE       shift and go to state 19
    B_FOLD_START    shift and go to state 2
    INDENT          shift and go to state 15
    B_LITERAL_START shift and go to state 21
    SINGLEQUOTE_START shift and go to state 8

    map                            shift and go to state 11
    sequence                       shift and go to state 1
    map_item                       shift and go to state 7
    map_item_key                   shift and go to state 6
    collection                     shift and go to state 60
    scalar                         shift and go to state 4
    flow_collection                shift and go to state 14
    sequence_item                  shift and go to state 5
    scalar_group                   shift and go to state 38

state 35

    (24) map_item_key -> B_MAP_KEY INDENT . collection DEDENT
    (38) scalar -> INDENT . scalar_group DEDENT
    (1) collection -> . sequence
    (2) collection -> . map
    (3) collection -> . flow_collection
    (43) scalar_group -> . SCALAR
    (44) scalar_group -> . scalar_group SCALAR
    (45) sequence -> . sequence sequence_item
    (46) sequence -> . sequence_item
    (21) map -> . map map_item
    (22) map -> . map_item
    (11) flow_collection -> . F_SEQUENCE_START flow_sequence F_SEQUENCE_END
    (12) flow_collection -> . F_MAP_START flow_map F_MAP_END
    (29) sequence_item -> . B_SEQUENCE_COMPACT_START collection DEDENT
    (47) sequence_item -> . B_SEQUENCE_START INDENT collection DEDENT
    (48) sequence_item -> . B_SEQUENCE_START flow_collection
    (49) sequence_item -> . B_SEQUENCE_START scalar
    (23) map_item -> . map_item_key map_item_value
    (26) map_item -> . B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT
    (24) map_item_key -> . B_MAP_KEY INDENT collection DEDENT
    (27) map_item_key -> . B_MAP_COMPACT_KEY collection DEDENT
    (30) map_item_key -> . scalar
    (31) map_item_key -> . B_MAP_KEY scalar
    (34) scalar -> . SCALAR
    (35) scalar -> . DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
    (36) scalar -> . CAST_TYPE scalar
    (37) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (38) scalar -> . INDENT scalar_group DEDENT
    (39) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (40) scalar -> . DOUBLEQUOTE_START DOUBLEQUOTE_END
    (41) scalar -> . SINGLEQUOTE_START SINGLEQUOTE_END
    (42) scalar -> . SINGLEQUOTE_START SCALAR SINGLEQUOTE_END

    SCALAR          shift and go to state 61
    F_SEQUENCE_START shift and go to state 17
    F_MAP_START     shift and go to state 20
    B_SEQUENCE_COMPACT_START shift and go to state 18
    B_SEQUENCE_START shift and go to state 9
    B_MAP_COMPACT_KEY shift and go to state 3
    B_MAP_KEY       shift and go to state 10
    DOUBLEQUOTE_START shift and go to state 16
    CAST_TYPE       shift and go to state 19
    B_FOLD_START    shift and go to state 2
    INDENT          shift and go to state 15
    B_LITERAL_START shift and go to state 21
    SINGLEQUOTE_START shift and go to state 8

    map                            shift and go to state 11
    sequence                       shift and go to state 1
    map_item                       shift and go to state 7
    map_item_key                   shift and go to state 6
    collection                     shift and go to state 62
    scalar                         shift and go to state 4
    flow_collection                shift and go to state 14
    sequence_item                  shift and go to state 5
    scalar_group                   shift and go to state 38

state 36

    (31) map_item_key -> B_MAP_KEY scalar .

    B_MAP_VALUE     reduce using rule 31 (map_item_key -> B_MAP_KEY scalar .)
    B_MAP_COMPACT_VALUE reduce using rule 31 (map_item_key -> B_MAP_KEY scalar .)


state 37

    (21) map -> map map_item .

    B_MAP_COMPACT_KEY reduce using rule 21 (map -> map map_item .)
    B_MAP_KEY       reduce using rule 21 (map -> map map_item .)
    SCALAR          reduce using rule 21 (map -> map map_item .)
    DOUBLEQUOTE_START reduce using rule 21 (map -> map map_item .)
    CAST_TYPE       reduce using rule 21 (map -> map map_item .)
    B_FOLD_START    reduce using rule 21 (map -> map map_item .)
    INDENT          reduce using rule 21 (map -> map map_item .)
    B_LITERAL_START reduce using rule 21 (map -> map map_item .)
    SINGLEQUOTE_START reduce using rule 21 (map -> map map_item .)
    $end            reduce using rule 21 (map -> map map_item .)
    DEDENT          reduce using rule 21 (map -> map map_item .)


state 38

    (38) scalar -> INDENT scalar_group . DEDENT
    (44) scalar_group -> scalar_group . SCALAR

    DEDENT          shift and go to state 63
    SCALAR          shift and go to state 51


state 39

    (40) scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .

    B_MAP_VALUE     reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)
    B_MAP_COMPACT_VALUE reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)
    F_SEQUENCE_END  reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)
    F_SEP           reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)
    B_SEQUENCE_COMPACT_START reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)
    B_SEQUENCE_START reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)
    $end            reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)
    DEDENT          reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)
    F_MAP_KEY       reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)
    B_MAP_COMPACT_KEY reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)
    B_MAP_KEY       reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)
    SCALAR          reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)
    DOUBLEQUOTE_START reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)
    CAST_TYPE       reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)
    B_FOLD_START    reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)
    INDENT          reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)
    B_LITERAL_START reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)
    SINGLEQUOTE_START reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)
    F_MAP_END       reduce using rule 40 (scalar -> DOUBLEQUOTE_START DOUBLEQUOTE_END .)


state 40

    (35) scalar -> DOUBLEQUOTE_START SCALAR . DOUBLEQUOTE_END

    DOUBLEQUOTE_END shift and go to state 64


state 41

    (19) flow_sequence -> flow_sequence_item .

    F_SEQUENCE_END  reduce using rule 19 (flow_sequence -> flow_sequence_item .)
    F_SEP           reduce using rule 19 (flow_sequence -> flow_sequence_item .)


state 42

    (20) flow_sequence_item -> scalar .

    F_SEQUENCE_END  reduce using rule 20 (flow_sequence_item -> scalar .)
    F_SEP           reduce using rule 20 (flow_sequence_item -> scalar .)


state 43

    (11) flow_collection -> F_SEQUENCE_START flow_sequence . F_SEQUENCE_END
    (18) flow_sequence -> flow_sequence . F_SEP flow_sequence_item

    F_SEQUENCE_END  shift and go to state 66
    F_SEP           shift and go to state 65


state 44

    (29) sequence_item -> B_SEQUENCE_COMPACT_START collection . DEDENT

    DEDENT          shift and go to state 67


state 45

    (36) scalar -> CAST_TYPE scalar .

    B_MAP_VALUE     reduce using rule 36 (scalar -> CAST_TYPE scalar .)
    B_MAP_COMPACT_VALUE reduce using rule 36 (scalar -> CAST_TYPE scalar .)
    F_SEQUENCE_END  reduce using rule 36 (scalar -> CAST_TYPE scalar .)
    F_SEP           reduce using rule 36 (scalar -> CAST_TYPE scalar .)
    B_SEQUENCE_COMPACT_START reduce using rule 36 (scalar -> CAST_TYPE scalar .)
    B_SEQUENCE_START reduce using rule 36 (scalar -> CAST_TYPE scalar .)
    $end            reduce using rule 36 (scalar -> CAST_TYPE scalar .)
    DEDENT          reduce using rule 36 (scalar -> CAST_TYPE scalar .)
    F_MAP_KEY       reduce using rule 36 (scalar -> CAST_TYPE scalar .)
    B_MAP_COMPACT_KEY reduce using rule 36 (scalar -> CAST_TYPE scalar .)
    B_MAP_KEY       reduce using rule 36 (scalar -> CAST_TYPE scalar .)
    SCALAR          reduce using rule 36 (scalar -> CAST_TYPE scalar .)
    DOUBLEQUOTE_START reduce using rule 36 (scalar -> CAST_TYPE scalar .)
    CAST_TYPE       reduce using rule 36 (scalar -> CAST_TYPE scalar .)
    B_FOLD_START    reduce using rule 36 (scalar -> CAST_TYPE scalar .)
    INDENT          reduce using rule 36 (scalar -> CAST_TYPE scalar .)
    B_LITERAL_START reduce using rule 36 (scalar -> CAST_TYPE scalar .)
    SINGLEQUOTE_START reduce using rule 36 (scalar -> CAST_TYPE scalar .)
    F_MAP_END       reduce using rule 36 (scalar -> CAST_TYPE scalar .)


state 46

    (15) flow_map_item -> flow_map_item_key . flow_map_item_value
    (17) flow_map_item_value -> . scalar
    (34) scalar -> . SCALAR
    (35) scalar -> . DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
    (36) scalar -> . CAST_TYPE scalar
    (37) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (38) scalar -> . INDENT scalar_group DEDENT
    (39) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (40) scalar -> . DOUBLEQUOTE_START DOUBLEQUOTE_END
    (41) scalar -> . SINGLEQUOTE_START SINGLEQUOTE_END
    (42) scalar -> . SINGLEQUOTE_START SCALAR SINGLEQUOTE_END

    SCALAR          shift and go to state 13
    DOUBLEQUOTE_START shift and go to state 16
    CAST_TYPE       shift and go to state 19
    B_FOLD_START    shift and go to state 2
    INDENT          shift and go to state 15
    B_LITERAL_START shift and go to state 21
    SINGLEQUOTE_START shift and go to state 8

    flow_map_item_value            shift and go to state 68
    scalar                         shift and go to state 69

state 47

    (16) flow_map_item_key -> scalar . F_MAP_KEY

    F_MAP_KEY       shift and go to state 70


state 48

    (12) flow_collection -> F_MAP_START flow_map . F_MAP_END
    (13) flow_map -> flow_map . F_SEP flow_map_item

    F_MAP_END       shift and go to state 72
    F_SEP           shift and go to state 71


state 49

    (14) flow_map -> flow_map_item .

    F_MAP_END       reduce using rule 14 (flow_map -> flow_map_item .)
    F_SEP           reduce using rule 14 (flow_map -> flow_map_item .)


state 50

    (39) scalar -> B_LITERAL_START scalar_group . B_LITERAL_END
    (44) scalar_group -> scalar_group . SCALAR

    B_LITERAL_END   shift and go to state 73
    SCALAR          shift and go to state 51


state 51

    (44) scalar_group -> scalar_group SCALAR .

    B_FOLD_END      reduce using rule 44 (scalar_group -> scalar_group SCALAR .)
    SCALAR          reduce using rule 44 (scalar_group -> scalar_group SCALAR .)
    DEDENT          reduce using rule 44 (scalar_group -> scalar_group SCALAR .)
    B_LITERAL_END   reduce using rule 44 (scalar_group -> scalar_group SCALAR .)


state 52

    (37) scalar -> B_FOLD_START scalar_group B_FOLD_END .

    B_MAP_VALUE     reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    B_MAP_COMPACT_VALUE reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    F_SEQUENCE_END  reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    F_SEP           reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    B_SEQUENCE_COMPACT_START reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    B_SEQUENCE_START reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    $end            reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    DEDENT          reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    F_MAP_KEY       reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    B_MAP_COMPACT_KEY reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    B_MAP_KEY       reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    SCALAR          reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    DOUBLEQUOTE_START reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    CAST_TYPE       reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    B_FOLD_START    reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    INDENT          reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    B_LITERAL_START reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    SINGLEQUOTE_START reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    F_MAP_END       reduce using rule 37 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)


state 53

    (26) map_item -> B_MAP_COMPACT_KEY scalar B_MAP_VALUE . scalar DEDENT
    (34) scalar -> . SCALAR
    (35) scalar -> . DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
    (36) scalar -> . CAST_TYPE scalar
    (37) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (38) scalar -> . INDENT scalar_group DEDENT
    (39) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (40) scalar -> . DOUBLEQUOTE_START DOUBLEQUOTE_END
    (41) scalar -> . SINGLEQUOTE_START SINGLEQUOTE_END
    (42) scalar -> . SINGLEQUOTE_START SCALAR SINGLEQUOTE_END

    SCALAR          shift and go to state 13
    DOUBLEQUOTE_START shift and go to state 16
    CAST_TYPE       shift and go to state 19
    B_FOLD_START    shift and go to state 2
    INDENT          shift and go to state 15
    B_LITERAL_START shift and go to state 21
    SINGLEQUOTE_START shift and go to state 8

    scalar                         shift and go to state 74

state 54

    (27) map_item_key -> B_MAP_COMPACT_KEY collection DEDENT .

    B_MAP_VALUE     reduce using rule 27 (map_item_key -> B_MAP_COMPACT_KEY collection DEDENT .)
    B_MAP_COMPACT_VALUE reduce using rule 27 (map_item_key -> B_MAP_COMPACT_KEY collection DEDENT .)


state 55

    (28) map_item_value -> B_MAP_COMPACT_VALUE collection . DEDENT

    DEDENT          shift and go to state 75


state 56

    (33) map_item_value -> B_MAP_VALUE scalar .

    B_MAP_COMPACT_KEY reduce using rule 33 (map_item_value -> B_MAP_VALUE scalar .)
    B_MAP_KEY       reduce using rule 33 (map_item_value -> B_MAP_VALUE scalar .)
    SCALAR          reduce using rule 33 (map_item_value -> B_MAP_VALUE scalar .)
    DOUBLEQUOTE_START reduce using rule 33 (map_item_value -> B_MAP_VALUE scalar .)
    CAST_TYPE       reduce using rule 33 (map_item_value -> B_MAP_VALUE scalar .)
    B_FOLD_START    reduce using rule 33 (map_item_value -> B_MAP_VALUE scalar .)
    INDENT          reduce using rule 33 (map_item_value -> B_MAP_VALUE scalar .)
    B_LITERAL_START reduce using rule 33 (map_item_value -> B_MAP_VALUE scalar .)
    SINGLEQUOTE_START reduce using rule 33 (map_item_value -> B_MAP_VALUE scalar .)
    $end            reduce using rule 33 (map_item_value -> B_MAP_VALUE scalar .)
    DEDENT          reduce using rule 33 (map_item_value -> B_MAP_VALUE scalar .)


state 57

    (32) map_item_value -> B_MAP_VALUE flow_collection .

    B_MAP_COMPACT_KEY reduce using rule 32 (map_item_value -> B_MAP_VALUE flow_collection .)
    B_MAP_KEY       reduce using rule 32 (map_item_value -> B_MAP_VALUE flow_collection .)
    SCALAR          reduce using rule 32 (map_item_value -> B_MAP_VALUE flow_collection .)
    DOUBLEQUOTE_START reduce using rule 32 (map_item_value -> B_MAP_VALUE flow_collection .)
    CAST_TYPE       reduce using rule 32 (map_item_value -> B_MAP_VALUE flow_collection .)
    B_FOLD_START    reduce using rule 32 (map_item_value -> B_MAP_VALUE flow_collection .)
    INDENT          reduce using rule 32 (map_item_value -> B_MAP_VALUE flow_collection .)
    B_LITERAL_START reduce using rule 32 (map_item_value -> B_MAP_VALUE flow_collection .)
    SINGLEQUOTE_START reduce using rule 32 (map_item_value -> B_MAP_VALUE flow_collection .)
    $end            reduce using rule 32 (map_item_value -> B_MAP_VALUE flow_collection .)
    DEDENT          reduce using rule 32 (map_item_value -> B_MAP_VALUE flow_collection .)


state 58

    (25) map_item_value -> B_MAP_VALUE INDENT . collection DEDENT
    (38) scalar -> INDENT . scalar_group DEDENT
    (1) collection -> . sequence
    (2) collection -> . map
    (3) collection -> . flow_collection
    (43) scalar_group -> . SCALAR
    (44) scalar_group -> . scalar_group SCALAR
    (45) sequence -> . sequence sequence_item
    (46) sequence -> . sequence_item
    (21) map -> . map map_item
    (22) map -> . map_item
    (11) flow_collection -> . F_SEQUENCE_START flow_sequence F_SEQUENCE_END
    (12) flow_collection -> . F_MAP_START flow_map F_MAP_END
    (29) sequence_item -> . B_SEQUENCE_COMPACT_START collection DEDENT
    (47) sequence_item -> . B_SEQUENCE_START INDENT collection DEDENT
    (48) sequence_item -> . B_SEQUENCE_START flow_collection
    (49) sequence_item -> . B_SEQUENCE_START scalar
    (23) map_item -> . map_item_key map_item_value
    (26) map_item -> . B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT
    (24) map_item_key -> . B_MAP_KEY INDENT collection DEDENT
    (27) map_item_key -> . B_MAP_COMPACT_KEY collection DEDENT
    (30) map_item_key -> . scalar
    (31) map_item_key -> . B_MAP_KEY scalar
    (34) scalar -> . SCALAR
    (35) scalar -> . DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
    (36) scalar -> . CAST_TYPE scalar
    (37) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (38) scalar -> . INDENT scalar_group DEDENT
    (39) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (40) scalar -> . DOUBLEQUOTE_START DOUBLEQUOTE_END
    (41) scalar -> . SINGLEQUOTE_START SINGLEQUOTE_END
    (42) scalar -> . SINGLEQUOTE_START SCALAR SINGLEQUOTE_END

    SCALAR          shift and go to state 61
    F_SEQUENCE_START shift and go to state 17
    F_MAP_START     shift and go to state 20
    B_SEQUENCE_COMPACT_START shift and go to state 18
    B_SEQUENCE_START shift and go to state 9
    B_MAP_COMPACT_KEY shift and go to state 3
    B_MAP_KEY       shift and go to state 10
    DOUBLEQUOTE_START shift and go to state 16
    CAST_TYPE       shift and go to state 19
    B_FOLD_START    shift and go to state 2
    INDENT          shift and go to state 15
    B_LITERAL_START shift and go to state 21
    SINGLEQUOTE_START shift and go to state 8

    map                            shift and go to state 11
    sequence                       shift and go to state 1
    map_item                       shift and go to state 7
    map_item_key                   shift and go to state 6
    collection                     shift and go to state 76
    scalar                         shift and go to state 4
    flow_collection                shift and go to state 14
    sequence_item                  shift and go to state 5
    scalar_group                   shift and go to state 38

state 59

    (42) scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .

    B_MAP_VALUE     reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)
    B_MAP_COMPACT_VALUE reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)
    F_SEQUENCE_END  reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)
    F_SEP           reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)
    B_SEQUENCE_COMPACT_START reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)
    B_SEQUENCE_START reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)
    $end            reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)
    DEDENT          reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)
    F_MAP_KEY       reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)
    B_MAP_COMPACT_KEY reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)
    B_MAP_KEY       reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)
    SCALAR          reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)
    DOUBLEQUOTE_START reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)
    CAST_TYPE       reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)
    B_FOLD_START    reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)
    INDENT          reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)
    B_LITERAL_START reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)
    SINGLEQUOTE_START reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)
    F_MAP_END       reduce using rule 42 (scalar -> SINGLEQUOTE_START SCALAR SINGLEQUOTE_END .)


state 60

    (47) sequence_item -> B_SEQUENCE_START INDENT collection . DEDENT

    DEDENT          shift and go to state 77


state 61

    (43) scalar_group -> SCALAR .
    (34) scalar -> SCALAR .

    DEDENT          reduce using rule 43 (scalar_group -> SCALAR .)
    SCALAR          reduce using rule 43 (scalar_group -> SCALAR .)
    B_MAP_VALUE     reduce using rule 34 (scalar -> SCALAR .)
    B_MAP_COMPACT_VALUE reduce using rule 34 (scalar -> SCALAR .)


state 62

    (24) map_item_key -> B_MAP_KEY INDENT collection . DEDENT

    DEDENT          shift and go to state 78


state 63

    (38) scalar -> INDENT scalar_group DEDENT .

    B_MAP_VALUE     reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)
    B_MAP_COMPACT_VALUE reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)
    F_SEQUENCE_END  reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)
    F_SEP           reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)
    B_SEQUENCE_COMPACT_START reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)
    B_SEQUENCE_START reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)
    $end            reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)
    DEDENT          reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)
    F_MAP_KEY       reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)
    B_MAP_COMPACT_KEY reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)
    B_MAP_KEY       reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)
    SCALAR          reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)
    DOUBLEQUOTE_START reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)
    CAST_TYPE       reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)
    B_FOLD_START    reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)
    INDENT          reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)
    B_LITERAL_START reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)
    SINGLEQUOTE_START reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)
    F_MAP_END       reduce using rule 38 (scalar -> INDENT scalar_group DEDENT .)


state 64

    (35) scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .

    B_MAP_VALUE     reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)
    B_MAP_COMPACT_VALUE reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)
    F_SEQUENCE_END  reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)
    F_SEP           reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)
    B_SEQUENCE_COMPACT_START reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)
    B_SEQUENCE_START reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)
    $end            reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)
    DEDENT          reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)
    F_MAP_KEY       reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)
    B_MAP_COMPACT_KEY reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)
    B_MAP_KEY       reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)
    SCALAR          reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)
    DOUBLEQUOTE_START reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)
    CAST_TYPE       reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)
    B_FOLD_START    reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)
    INDENT          reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)
    B_LITERAL_START reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)
    SINGLEQUOTE_START reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)
    F_MAP_END       reduce using rule 35 (scalar -> DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END .)


state 65

    (18) flow_sequence -> flow_sequence F_SEP . flow_sequence_item
    (20) flow_sequence_item -> . scalar
    (34) scalar -> . SCALAR
    (35) scalar -> . DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
    (36) scalar -> . CAST_TYPE scalar
    (37) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (38) scalar -> . INDENT scalar_group DEDENT
    (39) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (40) scalar -> . DOUBLEQUOTE_START DOUBLEQUOTE_END
    (41) scalar -> . SINGLEQUOTE_START SINGLEQUOTE_END
    (42) scalar -> . SINGLEQUOTE_START SCALAR SINGLEQUOTE_END

    SCALAR          shift and go to state 13
    DOUBLEQUOTE_START shift and go to state 16
    CAST_TYPE       shift and go to state 19
    B_FOLD_START    shift and go to state 2
    INDENT          shift and go to state 15
    B_LITERAL_START shift and go to state 21
    SINGLEQUOTE_START shift and go to state 8

    flow_sequence_item             shift and go to state 79
    scalar                         shift and go to state 42

state 66

    (11) flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .

    DEDENT          reduce using rule 11 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    B_SEQUENCE_COMPACT_START reduce using rule 11 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    B_SEQUENCE_START reduce using rule 11 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    $end            reduce using rule 11 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    B_MAP_COMPACT_KEY reduce using rule 11 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    B_MAP_KEY       reduce using rule 11 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    SCALAR          reduce using rule 11 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    DOUBLEQUOTE_START reduce using rule 11 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    CAST_TYPE       reduce using rule 11 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    B_FOLD_START    reduce using rule 11 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    INDENT          reduce using rule 11 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    B_LITERAL_START reduce using rule 11 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    SINGLEQUOTE_START reduce using rule 11 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)


state 67

    (29) sequence_item -> B_SEQUENCE_COMPACT_START collection DEDENT .

    B_SEQUENCE_COMPACT_START reduce using rule 29 (sequence_item -> B_SEQUENCE_COMPACT_START collection DEDENT .)
    B_SEQUENCE_START reduce using rule 29 (sequence_item -> B_SEQUENCE_COMPACT_START collection DEDENT .)
    $end            reduce using rule 29 (sequence_item -> B_SEQUENCE_COMPACT_START collection DEDENT .)
    DEDENT          reduce using rule 29 (sequence_item -> B_SEQUENCE_COMPACT_START collection DEDENT .)


state 68

    (15) flow_map_item -> flow_map_item_key flow_map_item_value .

    F_MAP_END       reduce using rule 15 (flow_map_item -> flow_map_item_key flow_map_item_value .)
    F_SEP           reduce using rule 15 (flow_map_item -> flow_map_item_key flow_map_item_value .)


state 69

    (17) flow_map_item_value -> scalar .

    F_MAP_END       reduce using rule 17 (flow_map_item_value -> scalar .)
    F_SEP           reduce using rule 17 (flow_map_item_value -> scalar .)


state 70

    (16) flow_map_item_key -> scalar F_MAP_KEY .

    SCALAR          reduce using rule 16 (flow_map_item_key -> scalar F_MAP_KEY .)
    DOUBLEQUOTE_START reduce using rule 16 (flow_map_item_key -> scalar F_MAP_KEY .)
    CAST_TYPE       reduce using rule 16 (flow_map_item_key -> scalar F_MAP_KEY .)
    B_FOLD_START    reduce using rule 16 (flow_map_item_key -> scalar F_MAP_KEY .)
    INDENT          reduce using rule 16 (flow_map_item_key -> scalar F_MAP_KEY .)
    B_LITERAL_START reduce using rule 16 (flow_map_item_key -> scalar F_MAP_KEY .)
    SINGLEQUOTE_START reduce using rule 16 (flow_map_item_key -> scalar F_MAP_KEY .)


state 71

    (13) flow_map -> flow_map F_SEP . flow_map_item
    (15) flow_map_item -> . flow_map_item_key flow_map_item_value
    (16) flow_map_item_key -> . scalar F_MAP_KEY
    (34) scalar -> . SCALAR
    (35) scalar -> . DOUBLEQUOTE_START SCALAR DOUBLEQUOTE_END
    (36) scalar -> . CAST_TYPE scalar
    (37) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (38) scalar -> . INDENT scalar_group DEDENT
    (39) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (40) scalar -> . DOUBLEQUOTE_START DOUBLEQUOTE_END
    (41) scalar -> . SINGLEQUOTE_START SINGLEQUOTE_END
    (42) scalar -> . SINGLEQUOTE_START SCALAR SINGLEQUOTE_END

    SCALAR          shift and go to state 13
    DOUBLEQUOTE_START shift and go to state 16
    CAST_TYPE       shift and go to state 19
    B_FOLD_START    shift and go to state 2
    INDENT          shift and go to state 15
    B_LITERAL_START shift and go to state 21
    SINGLEQUOTE_START shift and go to state 8

    flow_map_item                  shift and go to state 80
    flow_map_item_key              shift and go to state 46
    scalar                         shift and go to state 47

state 72

    (12) flow_collection -> F_MAP_START flow_map F_MAP_END .

    DEDENT          reduce using rule 12 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    B_SEQUENCE_COMPACT_START reduce using rule 12 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    B_SEQUENCE_START reduce using rule 12 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    $end            reduce using rule 12 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    B_MAP_COMPACT_KEY reduce using rule 12 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    B_MAP_KEY       reduce using rule 12 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    SCALAR          reduce using rule 12 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    DOUBLEQUOTE_START reduce using rule 12 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    CAST_TYPE       reduce using rule 12 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    B_FOLD_START    reduce using rule 12 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    INDENT          reduce using rule 12 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    B_LITERAL_START reduce using rule 12 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    SINGLEQUOTE_START reduce using rule 12 (flow_collection -> F_MAP_START flow_map F_MAP_END .)


state 73

    (39) scalar -> B_LITERAL_START scalar_group B_LITERAL_END .

    B_MAP_VALUE     reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    B_MAP_COMPACT_VALUE reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    F_SEQUENCE_END  reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    F_SEP           reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    B_SEQUENCE_COMPACT_START reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    B_SEQUENCE_START reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    $end            reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    DEDENT          reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    F_MAP_KEY       reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    B_MAP_COMPACT_KEY reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    B_MAP_KEY       reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    SCALAR          reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    DOUBLEQUOTE_START reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    CAST_TYPE       reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    B_FOLD_START    reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    INDENT          reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    B_LITERAL_START reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    SINGLEQUOTE_START reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    F_MAP_END       reduce using rule 39 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)


state 74

    (26) map_item -> B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar . DEDENT

    DEDENT          shift and go to state 81


state 75

    (28) map_item_value -> B_MAP_COMPACT_VALUE collection DEDENT .

    B_MAP_COMPACT_KEY reduce using rule 28 (map_item_value -> B_MAP_COMPACT_VALUE collection DEDENT .)
    B_MAP_KEY       reduce using rule 28 (map_item_value -> B_MAP_COMPACT_VALUE collection DEDENT .)
    SCALAR          reduce using rule 28 (map_item_value -> B_MAP_COMPACT_VALUE collection DEDENT .)
    DOUBLEQUOTE_START reduce using rule 28 (map_item_value -> B_MAP_COMPACT_VALUE collection DEDENT .)
    CAST_TYPE       reduce using rule 28 (map_item_value -> B_MAP_COMPACT_VALUE collection DEDENT .)
    B_FOLD_START    reduce using rule 28 (map_item_value -> B_MAP_COMPACT_VALUE collection DEDENT .)
    INDENT          reduce using rule 28 (map_item_value -> B_MAP_COMPACT_VALUE collection DEDENT .)
    B_LITERAL_START reduce using rule 28 (map_item_value -> B_MAP_COMPACT_VALUE collection DEDENT .)
    SINGLEQUOTE_START reduce using rule 28 (map_item_value -> B_MAP_COMPACT_VALUE collection DEDENT .)
    $end            reduce using rule 28 (map_item_value -> B_MAP_COMPACT_VALUE collection DEDENT .)
    DEDENT          reduce using rule 28 (map_item_value -> B_MAP_COMPACT_VALUE collection DEDENT .)


state 76

    (25) map_item_value -> B_MAP_VALUE INDENT collection . DEDENT

    DEDENT          shift and go to state 82


state 77

    (47) sequence_item -> B_SEQUENCE_START INDENT collection DEDENT .

    B_SEQUENCE_COMPACT_START reduce using rule 47 (sequence_item -> B_SEQUENCE_START INDENT collection DEDENT .)
    B_SEQUENCE_START reduce using rule 47 (sequence_item -> B_SEQUENCE_START INDENT collection DEDENT .)
    $end            reduce using rule 47 (sequence_item -> B_SEQUENCE_START INDENT collection DEDENT .)
    DEDENT          reduce using rule 47 (sequence_item -> B_SEQUENCE_START INDENT collection DEDENT .)


state 78

    (24) map_item_key -> B_MAP_KEY INDENT collection DEDENT .

    B_MAP_VALUE     reduce using rule 24 (map_item_key -> B_MAP_KEY INDENT collection DEDENT .)
    B_MAP_COMPACT_VALUE reduce using rule 24 (map_item_key -> B_MAP_KEY INDENT collection DEDENT .)


state 79

    (18) flow_sequence -> flow_sequence F_SEP flow_sequence_item .

    F_SEQUENCE_END  reduce using rule 18 (flow_sequence -> flow_sequence F_SEP flow_sequence_item .)
    F_SEP           reduce using rule 18 (flow_sequence -> flow_sequence F_SEP flow_sequence_item .)


state 80

    (13) flow_map -> flow_map F_SEP flow_map_item .

    F_MAP_END       reduce using rule 13 (flow_map -> flow_map F_SEP flow_map_item .)
    F_SEP           reduce using rule 13 (flow_map -> flow_map F_SEP flow_map_item .)


state 81

    (26) map_item -> B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT .

    B_MAP_COMPACT_KEY reduce using rule 26 (map_item -> B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT .)
    B_MAP_KEY       reduce using rule 26 (map_item -> B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT .)
    SCALAR          reduce using rule 26 (map_item -> B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT .)
    DOUBLEQUOTE_START reduce using rule 26 (map_item -> B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT .)
    CAST_TYPE       reduce using rule 26 (map_item -> B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT .)
    B_FOLD_START    reduce using rule 26 (map_item -> B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT .)
    INDENT          reduce using rule 26 (map_item -> B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT .)
    B_LITERAL_START reduce using rule 26 (map_item -> B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT .)
    SINGLEQUOTE_START reduce using rule 26 (map_item -> B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT .)
    $end            reduce using rule 26 (map_item -> B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT .)
    DEDENT          reduce using rule 26 (map_item -> B_MAP_COMPACT_KEY scalar B_MAP_VALUE scalar DEDENT .)


state 82

    (25) map_item_value -> B_MAP_VALUE INDENT collection DEDENT .

    B_MAP_COMPACT_KEY reduce using rule 25 (map_item_value -> B_MAP_VALUE INDENT collection DEDENT .)
    B_MAP_KEY       reduce using rule 25 (map_item_value -> B_MAP_VALUE INDENT collection DEDENT .)
    SCALAR          reduce using rule 25 (map_item_value -> B_MAP_VALUE INDENT collection DEDENT .)
    DOUBLEQUOTE_START reduce using rule 25 (map_item_value -> B_MAP_VALUE INDENT collection DEDENT .)
    CAST_TYPE       reduce using rule 25 (map_item_value -> B_MAP_VALUE INDENT collection DEDENT .)
    B_FOLD_START    reduce using rule 25 (map_item_value -> B_MAP_VALUE INDENT collection DEDENT .)
    INDENT          reduce using rule 25 (map_item_value -> B_MAP_VALUE INDENT collection DEDENT .)
    B_LITERAL_START reduce using rule 25 (map_item_value -> B_MAP_VALUE INDENT collection DEDENT .)
    SINGLEQUOTE_START reduce using rule 25 (map_item_value -> B_MAP_VALUE INDENT collection DEDENT .)
    $end            reduce using rule 25 (map_item_value -> B_MAP_VALUE INDENT collection DEDENT .)
    DEDENT          reduce using rule 25 (map_item_value -> B_MAP_VALUE INDENT collection DEDENT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for B_MAP_VALUE in state 25 resolved as shift
