Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> docs
Rule 1     docs -> doc
Rule 2     docs -> docs doc
Rule 3     doc -> DOC_START doc DOC_END
Rule 4     doc -> DOC_START doc
Rule 5     doc -> INDENT doc DEDENT
Rule 6     doc -> collection
Rule 7     doc -> scalar
Rule 8     collection -> sequence
Rule 9     collection -> map
Rule 10    collection -> flow_collection
Rule 11    map -> map_item
Rule 12    map -> map map_item
Rule 13    map_item -> map_item_key map_item_value
Rule 14    map_item_key -> scalar B_MAP_KEY
Rule 15    map_item_value -> INDENT collection DEDENT
Rule 16    map_item_value -> flow_collection
Rule 17    map_item_value -> scalar
Rule 18    sequence -> sequence_item
Rule 19    sequence -> sequence sequence_item
Rule 20    sequence_item -> B_SEQUENCE_START scalar
Rule 21    sequence_item -> B_SEQUENCE_START INDENT collection DEDENT
Rule 22    sequence_item -> B_SEQUENCE_START flow_collection
Rule 23    scalar -> CAST_TYPE scalar
Rule 24    scalar -> SCALAR
Rule 25    scalar -> B_LITERAL_START scalar_group B_LITERAL_END
Rule 26    scalar -> B_FOLD_START scalar_group B_FOLD_END
Rule 27    scalar_group -> SCALAR
Rule 28    scalar_group -> scalar_group SCALAR
Rule 29    flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END
Rule 30    flow_collection -> F_MAP_START flow_map F_MAP_END
Rule 31    flow_sequence -> flow_sequence_item
Rule 32    flow_sequence -> flow_sequence F_SEP flow_sequence_item
Rule 33    flow_sequence_item -> scalar
Rule 34    flow_map -> flow_map_item
Rule 35    flow_map -> flow_map F_SEP flow_map_item
Rule 36    flow_map_item -> flow_map_item_key flow_map_item_value
Rule 37    flow_map_item_key -> scalar F_MAP_KEY
Rule 38    flow_map_item_value -> scalar

Terminals, with rules where they appear

B_FOLD_END           : 26
B_FOLD_START         : 26
B_LITERAL_END        : 25
B_LITERAL_START      : 25
B_MAP_KEY            : 14
B_SEQUENCE_START     : 20 21 22
CAST_TYPE            : 23
DEDENT               : 5 15 21
DOC_END              : 3
DOC_START            : 3 4
F_MAP_END            : 30
F_MAP_KEY            : 37
F_MAP_START          : 30
F_SEP                : 32 35
F_SEQUENCE_END       : 29
F_SEQUENCE_START     : 29
INDENT               : 5 15 21
SCALAR               : 24 27 28
error                : 

Nonterminals, with rules where they appear

collection           : 6 15 21
doc                  : 1 2 3 4 5
docs                 : 2 0
flow_collection      : 10 16 22
flow_map             : 30 35
flow_map_item        : 34 35
flow_map_item_key    : 36
flow_map_item_value  : 36
flow_sequence        : 29 32
flow_sequence_item   : 31 32
map                  : 9 12
map_item             : 11 12
map_item_key         : 13
map_item_value       : 13
scalar               : 7 14 17 20 23 33 37 38
scalar_group         : 25 26 28
sequence             : 8 19
sequence_item        : 18 19

Parsing method: LALR

state 0

    (0) S' -> . docs
    (1) docs -> . doc
    (2) docs -> . docs doc
    (3) doc -> . DOC_START doc DOC_END
    (4) doc -> . DOC_START doc
    (5) doc -> . INDENT doc DEDENT
    (6) doc -> . collection
    (7) doc -> . scalar
    (8) collection -> . sequence
    (9) collection -> . map
    (10) collection -> . flow_collection
    (23) scalar -> . CAST_TYPE scalar
    (24) scalar -> . SCALAR
    (25) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (26) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (18) sequence -> . sequence_item
    (19) sequence -> . sequence sequence_item
    (11) map -> . map_item
    (12) map -> . map map_item
    (29) flow_collection -> . F_SEQUENCE_START flow_sequence F_SEQUENCE_END
    (30) flow_collection -> . F_MAP_START flow_map F_MAP_END
    (20) sequence_item -> . B_SEQUENCE_START scalar
    (21) sequence_item -> . B_SEQUENCE_START INDENT collection DEDENT
    (22) sequence_item -> . B_SEQUENCE_START flow_collection
    (13) map_item -> . map_item_key map_item_value
    (14) map_item_key -> . scalar B_MAP_KEY

    DOC_START       shift and go to state 6
    INDENT          shift and go to state 14
    CAST_TYPE       shift and go to state 17
    SCALAR          shift and go to state 12
    B_LITERAL_START shift and go to state 19
    B_FOLD_START    shift and go to state 2
    F_SEQUENCE_START shift and go to state 16
    F_MAP_START     shift and go to state 18
    B_SEQUENCE_START shift and go to state 10

    map                            shift and go to state 8
    sequence                       shift and go to state 1
    docs                           shift and go to state 9
    map_item_key                   shift and go to state 7
    collection                     shift and go to state 11
    scalar                         shift and go to state 3
    flow_collection                shift and go to state 13
    doc                            shift and go to state 15
    sequence_item                  shift and go to state 4
    map_item                       shift and go to state 5

state 1

    (8) collection -> sequence .
    (19) sequence -> sequence . sequence_item
    (20) sequence_item -> . B_SEQUENCE_START scalar
    (21) sequence_item -> . B_SEQUENCE_START INDENT collection DEDENT
    (22) sequence_item -> . B_SEQUENCE_START flow_collection

  ! shift/reduce conflict for B_SEQUENCE_START resolved as shift
    DOC_START       reduce using rule 8 (collection -> sequence .)
    INDENT          reduce using rule 8 (collection -> sequence .)
    CAST_TYPE       reduce using rule 8 (collection -> sequence .)
    SCALAR          reduce using rule 8 (collection -> sequence .)
    B_LITERAL_START reduce using rule 8 (collection -> sequence .)
    B_FOLD_START    reduce using rule 8 (collection -> sequence .)
    F_SEQUENCE_START reduce using rule 8 (collection -> sequence .)
    F_MAP_START     reduce using rule 8 (collection -> sequence .)
    $end            reduce using rule 8 (collection -> sequence .)
    DEDENT          reduce using rule 8 (collection -> sequence .)
    DOC_END         reduce using rule 8 (collection -> sequence .)
    B_SEQUENCE_START shift and go to state 10

  ! B_SEQUENCE_START [ reduce using rule 8 (collection -> sequence .) ]

    sequence_item                  shift and go to state 20

state 2

    (26) scalar -> B_FOLD_START . scalar_group B_FOLD_END
    (27) scalar_group -> . SCALAR
    (28) scalar_group -> . scalar_group SCALAR

    SCALAR          shift and go to state 21

    scalar_group                   shift and go to state 22

state 3

    (7) doc -> scalar .
    (14) map_item_key -> scalar . B_MAP_KEY

    DOC_START       reduce using rule 7 (doc -> scalar .)
    INDENT          reduce using rule 7 (doc -> scalar .)
    CAST_TYPE       reduce using rule 7 (doc -> scalar .)
    SCALAR          reduce using rule 7 (doc -> scalar .)
    B_LITERAL_START reduce using rule 7 (doc -> scalar .)
    B_FOLD_START    reduce using rule 7 (doc -> scalar .)
    F_SEQUENCE_START reduce using rule 7 (doc -> scalar .)
    F_MAP_START     reduce using rule 7 (doc -> scalar .)
    B_SEQUENCE_START reduce using rule 7 (doc -> scalar .)
    $end            reduce using rule 7 (doc -> scalar .)
    DOC_END         reduce using rule 7 (doc -> scalar .)
    DEDENT          reduce using rule 7 (doc -> scalar .)
    B_MAP_KEY       shift and go to state 23


state 4

    (18) sequence -> sequence_item .

    B_SEQUENCE_START reduce using rule 18 (sequence -> sequence_item .)
    DOC_START       reduce using rule 18 (sequence -> sequence_item .)
    INDENT          reduce using rule 18 (sequence -> sequence_item .)
    CAST_TYPE       reduce using rule 18 (sequence -> sequence_item .)
    SCALAR          reduce using rule 18 (sequence -> sequence_item .)
    B_LITERAL_START reduce using rule 18 (sequence -> sequence_item .)
    B_FOLD_START    reduce using rule 18 (sequence -> sequence_item .)
    F_SEQUENCE_START reduce using rule 18 (sequence -> sequence_item .)
    F_MAP_START     reduce using rule 18 (sequence -> sequence_item .)
    $end            reduce using rule 18 (sequence -> sequence_item .)
    DOC_END         reduce using rule 18 (sequence -> sequence_item .)
    DEDENT          reduce using rule 18 (sequence -> sequence_item .)


state 5

    (11) map -> map_item .

    CAST_TYPE       reduce using rule 11 (map -> map_item .)
    SCALAR          reduce using rule 11 (map -> map_item .)
    B_LITERAL_START reduce using rule 11 (map -> map_item .)
    B_FOLD_START    reduce using rule 11 (map -> map_item .)
    DOC_START       reduce using rule 11 (map -> map_item .)
    INDENT          reduce using rule 11 (map -> map_item .)
    F_SEQUENCE_START reduce using rule 11 (map -> map_item .)
    F_MAP_START     reduce using rule 11 (map -> map_item .)
    B_SEQUENCE_START reduce using rule 11 (map -> map_item .)
    $end            reduce using rule 11 (map -> map_item .)
    DOC_END         reduce using rule 11 (map -> map_item .)
    DEDENT          reduce using rule 11 (map -> map_item .)


state 6

    (3) doc -> DOC_START . doc DOC_END
    (4) doc -> DOC_START . doc
    (3) doc -> . DOC_START doc DOC_END
    (4) doc -> . DOC_START doc
    (5) doc -> . INDENT doc DEDENT
    (6) doc -> . collection
    (7) doc -> . scalar
    (8) collection -> . sequence
    (9) collection -> . map
    (10) collection -> . flow_collection
    (23) scalar -> . CAST_TYPE scalar
    (24) scalar -> . SCALAR
    (25) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (26) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (18) sequence -> . sequence_item
    (19) sequence -> . sequence sequence_item
    (11) map -> . map_item
    (12) map -> . map map_item
    (29) flow_collection -> . F_SEQUENCE_START flow_sequence F_SEQUENCE_END
    (30) flow_collection -> . F_MAP_START flow_map F_MAP_END
    (20) sequence_item -> . B_SEQUENCE_START scalar
    (21) sequence_item -> . B_SEQUENCE_START INDENT collection DEDENT
    (22) sequence_item -> . B_SEQUENCE_START flow_collection
    (13) map_item -> . map_item_key map_item_value
    (14) map_item_key -> . scalar B_MAP_KEY

    DOC_START       shift and go to state 6
    INDENT          shift and go to state 14
    CAST_TYPE       shift and go to state 17
    SCALAR          shift and go to state 12
    B_LITERAL_START shift and go to state 19
    B_FOLD_START    shift and go to state 2
    F_SEQUENCE_START shift and go to state 16
    F_MAP_START     shift and go to state 18
    B_SEQUENCE_START shift and go to state 10

    map                            shift and go to state 8
    sequence                       shift and go to state 1
    doc                            shift and go to state 24
    map_item_key                   shift and go to state 7
    collection                     shift and go to state 11
    scalar                         shift and go to state 3
    flow_collection                shift and go to state 13
    sequence_item                  shift and go to state 4
    map_item                       shift and go to state 5

state 7

    (13) map_item -> map_item_key . map_item_value
    (15) map_item_value -> . INDENT collection DEDENT
    (16) map_item_value -> . flow_collection
    (17) map_item_value -> . scalar
    (29) flow_collection -> . F_SEQUENCE_START flow_sequence F_SEQUENCE_END
    (30) flow_collection -> . F_MAP_START flow_map F_MAP_END
    (23) scalar -> . CAST_TYPE scalar
    (24) scalar -> . SCALAR
    (25) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (26) scalar -> . B_FOLD_START scalar_group B_FOLD_END

    INDENT          shift and go to state 25
    F_SEQUENCE_START shift and go to state 16
    F_MAP_START     shift and go to state 18
    CAST_TYPE       shift and go to state 17
    SCALAR          shift and go to state 12
    B_LITERAL_START shift and go to state 19
    B_FOLD_START    shift and go to state 2

    scalar                         shift and go to state 26
    flow_collection                shift and go to state 27
    map_item_value                 shift and go to state 28

state 8

    (9) collection -> map .
    (12) map -> map . map_item
    (13) map_item -> . map_item_key map_item_value
    (14) map_item_key -> . scalar B_MAP_KEY
    (23) scalar -> . CAST_TYPE scalar
    (24) scalar -> . SCALAR
    (25) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (26) scalar -> . B_FOLD_START scalar_group B_FOLD_END

  ! shift/reduce conflict for CAST_TYPE resolved as shift
  ! shift/reduce conflict for SCALAR resolved as shift
  ! shift/reduce conflict for B_LITERAL_START resolved as shift
  ! shift/reduce conflict for B_FOLD_START resolved as shift
    DOC_START       reduce using rule 9 (collection -> map .)
    INDENT          reduce using rule 9 (collection -> map .)
    F_SEQUENCE_START reduce using rule 9 (collection -> map .)
    F_MAP_START     reduce using rule 9 (collection -> map .)
    B_SEQUENCE_START reduce using rule 9 (collection -> map .)
    $end            reduce using rule 9 (collection -> map .)
    DEDENT          reduce using rule 9 (collection -> map .)
    DOC_END         reduce using rule 9 (collection -> map .)
    CAST_TYPE       shift and go to state 17
    SCALAR          shift and go to state 12
    B_LITERAL_START shift and go to state 19
    B_FOLD_START    shift and go to state 2

  ! CAST_TYPE       [ reduce using rule 9 (collection -> map .) ]
  ! SCALAR          [ reduce using rule 9 (collection -> map .) ]
  ! B_LITERAL_START [ reduce using rule 9 (collection -> map .) ]
  ! B_FOLD_START    [ reduce using rule 9 (collection -> map .) ]

    map_item                       shift and go to state 29
    scalar                         shift and go to state 30
    map_item_key                   shift and go to state 7

state 9

    (0) S' -> docs .
    (2) docs -> docs . doc
    (3) doc -> . DOC_START doc DOC_END
    (4) doc -> . DOC_START doc
    (5) doc -> . INDENT doc DEDENT
    (6) doc -> . collection
    (7) doc -> . scalar
    (8) collection -> . sequence
    (9) collection -> . map
    (10) collection -> . flow_collection
    (23) scalar -> . CAST_TYPE scalar
    (24) scalar -> . SCALAR
    (25) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (26) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (18) sequence -> . sequence_item
    (19) sequence -> . sequence sequence_item
    (11) map -> . map_item
    (12) map -> . map map_item
    (29) flow_collection -> . F_SEQUENCE_START flow_sequence F_SEQUENCE_END
    (30) flow_collection -> . F_MAP_START flow_map F_MAP_END
    (20) sequence_item -> . B_SEQUENCE_START scalar
    (21) sequence_item -> . B_SEQUENCE_START INDENT collection DEDENT
    (22) sequence_item -> . B_SEQUENCE_START flow_collection
    (13) map_item -> . map_item_key map_item_value
    (14) map_item_key -> . scalar B_MAP_KEY

    DOC_START       shift and go to state 6
    INDENT          shift and go to state 14
    CAST_TYPE       shift and go to state 17
    SCALAR          shift and go to state 12
    B_LITERAL_START shift and go to state 19
    B_FOLD_START    shift and go to state 2
    F_SEQUENCE_START shift and go to state 16
    F_MAP_START     shift and go to state 18
    B_SEQUENCE_START shift and go to state 10

    map                            shift and go to state 8
    sequence                       shift and go to state 1
    map_item_key                   shift and go to state 7
    collection                     shift and go to state 11
    scalar                         shift and go to state 3
    flow_collection                shift and go to state 13
    doc                            shift and go to state 31
    sequence_item                  shift and go to state 4
    map_item                       shift and go to state 5

state 10

    (20) sequence_item -> B_SEQUENCE_START . scalar
    (21) sequence_item -> B_SEQUENCE_START . INDENT collection DEDENT
    (22) sequence_item -> B_SEQUENCE_START . flow_collection
    (23) scalar -> . CAST_TYPE scalar
    (24) scalar -> . SCALAR
    (25) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (26) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (29) flow_collection -> . F_SEQUENCE_START flow_sequence F_SEQUENCE_END
    (30) flow_collection -> . F_MAP_START flow_map F_MAP_END

    INDENT          shift and go to state 32
    CAST_TYPE       shift and go to state 17
    SCALAR          shift and go to state 12
    B_LITERAL_START shift and go to state 19
    B_FOLD_START    shift and go to state 2
    F_SEQUENCE_START shift and go to state 16
    F_MAP_START     shift and go to state 18

    scalar                         shift and go to state 33
    flow_collection                shift and go to state 34

state 11

    (6) doc -> collection .

    DOC_START       reduce using rule 6 (doc -> collection .)
    INDENT          reduce using rule 6 (doc -> collection .)
    CAST_TYPE       reduce using rule 6 (doc -> collection .)
    SCALAR          reduce using rule 6 (doc -> collection .)
    B_LITERAL_START reduce using rule 6 (doc -> collection .)
    B_FOLD_START    reduce using rule 6 (doc -> collection .)
    F_SEQUENCE_START reduce using rule 6 (doc -> collection .)
    F_MAP_START     reduce using rule 6 (doc -> collection .)
    B_SEQUENCE_START reduce using rule 6 (doc -> collection .)
    $end            reduce using rule 6 (doc -> collection .)
    DOC_END         reduce using rule 6 (doc -> collection .)
    DEDENT          reduce using rule 6 (doc -> collection .)


state 12

    (24) scalar -> SCALAR .

    B_MAP_KEY       reduce using rule 24 (scalar -> SCALAR .)
    DOC_START       reduce using rule 24 (scalar -> SCALAR .)
    INDENT          reduce using rule 24 (scalar -> SCALAR .)
    CAST_TYPE       reduce using rule 24 (scalar -> SCALAR .)
    SCALAR          reduce using rule 24 (scalar -> SCALAR .)
    B_LITERAL_START reduce using rule 24 (scalar -> SCALAR .)
    B_FOLD_START    reduce using rule 24 (scalar -> SCALAR .)
    F_SEQUENCE_START reduce using rule 24 (scalar -> SCALAR .)
    F_MAP_START     reduce using rule 24 (scalar -> SCALAR .)
    B_SEQUENCE_START reduce using rule 24 (scalar -> SCALAR .)
    $end            reduce using rule 24 (scalar -> SCALAR .)
    F_MAP_END       reduce using rule 24 (scalar -> SCALAR .)
    F_SEP           reduce using rule 24 (scalar -> SCALAR .)
    DEDENT          reduce using rule 24 (scalar -> SCALAR .)
    DOC_END         reduce using rule 24 (scalar -> SCALAR .)
    F_SEQUENCE_END  reduce using rule 24 (scalar -> SCALAR .)
    F_MAP_KEY       reduce using rule 24 (scalar -> SCALAR .)


state 13

    (10) collection -> flow_collection .

    DOC_START       reduce using rule 10 (collection -> flow_collection .)
    INDENT          reduce using rule 10 (collection -> flow_collection .)
    CAST_TYPE       reduce using rule 10 (collection -> flow_collection .)
    SCALAR          reduce using rule 10 (collection -> flow_collection .)
    B_LITERAL_START reduce using rule 10 (collection -> flow_collection .)
    B_FOLD_START    reduce using rule 10 (collection -> flow_collection .)
    F_SEQUENCE_START reduce using rule 10 (collection -> flow_collection .)
    F_MAP_START     reduce using rule 10 (collection -> flow_collection .)
    B_SEQUENCE_START reduce using rule 10 (collection -> flow_collection .)
    $end            reduce using rule 10 (collection -> flow_collection .)
    DEDENT          reduce using rule 10 (collection -> flow_collection .)
    DOC_END         reduce using rule 10 (collection -> flow_collection .)


state 14

    (5) doc -> INDENT . doc DEDENT
    (3) doc -> . DOC_START doc DOC_END
    (4) doc -> . DOC_START doc
    (5) doc -> . INDENT doc DEDENT
    (6) doc -> . collection
    (7) doc -> . scalar
    (8) collection -> . sequence
    (9) collection -> . map
    (10) collection -> . flow_collection
    (23) scalar -> . CAST_TYPE scalar
    (24) scalar -> . SCALAR
    (25) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (26) scalar -> . B_FOLD_START scalar_group B_FOLD_END
    (18) sequence -> . sequence_item
    (19) sequence -> . sequence sequence_item
    (11) map -> . map_item
    (12) map -> . map map_item
    (29) flow_collection -> . F_SEQUENCE_START flow_sequence F_SEQUENCE_END
    (30) flow_collection -> . F_MAP_START flow_map F_MAP_END
    (20) sequence_item -> . B_SEQUENCE_START scalar
    (21) sequence_item -> . B_SEQUENCE_START INDENT collection DEDENT
    (22) sequence_item -> . B_SEQUENCE_START flow_collection
    (13) map_item -> . map_item_key map_item_value
    (14) map_item_key -> . scalar B_MAP_KEY

    DOC_START       shift and go to state 6
    INDENT          shift and go to state 14
    CAST_TYPE       shift and go to state 17
    SCALAR          shift and go to state 12
    B_LITERAL_START shift and go to state 19
    B_FOLD_START    shift and go to state 2
    F_SEQUENCE_START shift and go to state 16
    F_MAP_START     shift and go to state 18
    B_SEQUENCE_START shift and go to state 10

    map                            shift and go to state 8
    sequence                       shift and go to state 1
    doc                            shift and go to state 35
    map_item_key                   shift and go to state 7
    collection                     shift and go to state 11
    scalar                         shift and go to state 3
    flow_collection                shift and go to state 13
    sequence_item                  shift and go to state 4
    map_item                       shift and go to state 5

state 15

    (1) docs -> doc .

    DOC_START       reduce using rule 1 (docs -> doc .)
    INDENT          reduce using rule 1 (docs -> doc .)
    CAST_TYPE       reduce using rule 1 (docs -> doc .)
    SCALAR          reduce using rule 1 (docs -> doc .)
    B_LITERAL_START reduce using rule 1 (docs -> doc .)
    B_FOLD_START    reduce using rule 1 (docs -> doc .)
    F_SEQUENCE_START reduce using rule 1 (docs -> doc .)
    F_MAP_START     reduce using rule 1 (docs -> doc .)
    B_SEQUENCE_START reduce using rule 1 (docs -> doc .)
    $end            reduce using rule 1 (docs -> doc .)


state 16

    (29) flow_collection -> F_SEQUENCE_START . flow_sequence F_SEQUENCE_END
    (31) flow_sequence -> . flow_sequence_item
    (32) flow_sequence -> . flow_sequence F_SEP flow_sequence_item
    (33) flow_sequence_item -> . scalar
    (23) scalar -> . CAST_TYPE scalar
    (24) scalar -> . SCALAR
    (25) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (26) scalar -> . B_FOLD_START scalar_group B_FOLD_END

    CAST_TYPE       shift and go to state 17
    SCALAR          shift and go to state 12
    B_LITERAL_START shift and go to state 19
    B_FOLD_START    shift and go to state 2

    flow_sequence_item             shift and go to state 36
    scalar                         shift and go to state 37
    flow_sequence                  shift and go to state 38

state 17

    (23) scalar -> CAST_TYPE . scalar
    (23) scalar -> . CAST_TYPE scalar
    (24) scalar -> . SCALAR
    (25) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (26) scalar -> . B_FOLD_START scalar_group B_FOLD_END

    CAST_TYPE       shift and go to state 17
    SCALAR          shift and go to state 12
    B_LITERAL_START shift and go to state 19
    B_FOLD_START    shift and go to state 2

    scalar                         shift and go to state 39

state 18

    (30) flow_collection -> F_MAP_START . flow_map F_MAP_END
    (34) flow_map -> . flow_map_item
    (35) flow_map -> . flow_map F_SEP flow_map_item
    (36) flow_map_item -> . flow_map_item_key flow_map_item_value
    (37) flow_map_item_key -> . scalar F_MAP_KEY
    (23) scalar -> . CAST_TYPE scalar
    (24) scalar -> . SCALAR
    (25) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (26) scalar -> . B_FOLD_START scalar_group B_FOLD_END

    CAST_TYPE       shift and go to state 17
    SCALAR          shift and go to state 12
    B_LITERAL_START shift and go to state 19
    B_FOLD_START    shift and go to state 2

    flow_map                       shift and go to state 40
    flow_map_item                  shift and go to state 41
    flow_map_item_key              shift and go to state 42
    scalar                         shift and go to state 43

state 19

    (25) scalar -> B_LITERAL_START . scalar_group B_LITERAL_END
    (27) scalar_group -> . SCALAR
    (28) scalar_group -> . scalar_group SCALAR

    SCALAR          shift and go to state 21

    scalar_group                   shift and go to state 44

state 20

    (19) sequence -> sequence sequence_item .

    B_SEQUENCE_START reduce using rule 19 (sequence -> sequence sequence_item .)
    DOC_START       reduce using rule 19 (sequence -> sequence sequence_item .)
    INDENT          reduce using rule 19 (sequence -> sequence sequence_item .)
    CAST_TYPE       reduce using rule 19 (sequence -> sequence sequence_item .)
    SCALAR          reduce using rule 19 (sequence -> sequence sequence_item .)
    B_LITERAL_START reduce using rule 19 (sequence -> sequence sequence_item .)
    B_FOLD_START    reduce using rule 19 (sequence -> sequence sequence_item .)
    F_SEQUENCE_START reduce using rule 19 (sequence -> sequence sequence_item .)
    F_MAP_START     reduce using rule 19 (sequence -> sequence sequence_item .)
    $end            reduce using rule 19 (sequence -> sequence sequence_item .)
    DOC_END         reduce using rule 19 (sequence -> sequence sequence_item .)
    DEDENT          reduce using rule 19 (sequence -> sequence sequence_item .)


state 21

    (27) scalar_group -> SCALAR .

    B_FOLD_END      reduce using rule 27 (scalar_group -> SCALAR .)
    SCALAR          reduce using rule 27 (scalar_group -> SCALAR .)
    B_LITERAL_END   reduce using rule 27 (scalar_group -> SCALAR .)


state 22

    (26) scalar -> B_FOLD_START scalar_group . B_FOLD_END
    (28) scalar_group -> scalar_group . SCALAR

    B_FOLD_END      shift and go to state 46
    SCALAR          shift and go to state 45


state 23

    (14) map_item_key -> scalar B_MAP_KEY .

    INDENT          reduce using rule 14 (map_item_key -> scalar B_MAP_KEY .)
    F_SEQUENCE_START reduce using rule 14 (map_item_key -> scalar B_MAP_KEY .)
    F_MAP_START     reduce using rule 14 (map_item_key -> scalar B_MAP_KEY .)
    CAST_TYPE       reduce using rule 14 (map_item_key -> scalar B_MAP_KEY .)
    SCALAR          reduce using rule 14 (map_item_key -> scalar B_MAP_KEY .)
    B_LITERAL_START reduce using rule 14 (map_item_key -> scalar B_MAP_KEY .)
    B_FOLD_START    reduce using rule 14 (map_item_key -> scalar B_MAP_KEY .)


state 24

    (3) doc -> DOC_START doc . DOC_END
    (4) doc -> DOC_START doc .

  ! shift/reduce conflict for DOC_END resolved as shift
    DOC_END         shift and go to state 47
    DOC_START       reduce using rule 4 (doc -> DOC_START doc .)
    INDENT          reduce using rule 4 (doc -> DOC_START doc .)
    CAST_TYPE       reduce using rule 4 (doc -> DOC_START doc .)
    SCALAR          reduce using rule 4 (doc -> DOC_START doc .)
    B_LITERAL_START reduce using rule 4 (doc -> DOC_START doc .)
    B_FOLD_START    reduce using rule 4 (doc -> DOC_START doc .)
    F_SEQUENCE_START reduce using rule 4 (doc -> DOC_START doc .)
    F_MAP_START     reduce using rule 4 (doc -> DOC_START doc .)
    B_SEQUENCE_START reduce using rule 4 (doc -> DOC_START doc .)
    $end            reduce using rule 4 (doc -> DOC_START doc .)
    DEDENT          reduce using rule 4 (doc -> DOC_START doc .)

  ! DOC_END         [ reduce using rule 4 (doc -> DOC_START doc .) ]


state 25

    (15) map_item_value -> INDENT . collection DEDENT
    (8) collection -> . sequence
    (9) collection -> . map
    (10) collection -> . flow_collection
    (18) sequence -> . sequence_item
    (19) sequence -> . sequence sequence_item
    (11) map -> . map_item
    (12) map -> . map map_item
    (29) flow_collection -> . F_SEQUENCE_START flow_sequence F_SEQUENCE_END
    (30) flow_collection -> . F_MAP_START flow_map F_MAP_END
    (20) sequence_item -> . B_SEQUENCE_START scalar
    (21) sequence_item -> . B_SEQUENCE_START INDENT collection DEDENT
    (22) sequence_item -> . B_SEQUENCE_START flow_collection
    (13) map_item -> . map_item_key map_item_value
    (14) map_item_key -> . scalar B_MAP_KEY
    (23) scalar -> . CAST_TYPE scalar
    (24) scalar -> . SCALAR
    (25) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (26) scalar -> . B_FOLD_START scalar_group B_FOLD_END

    F_SEQUENCE_START shift and go to state 16
    F_MAP_START     shift and go to state 18
    B_SEQUENCE_START shift and go to state 10
    CAST_TYPE       shift and go to state 17
    SCALAR          shift and go to state 12
    B_LITERAL_START shift and go to state 19
    B_FOLD_START    shift and go to state 2

    map                            shift and go to state 8
    sequence                       shift and go to state 1
    map_item_key                   shift and go to state 7
    collection                     shift and go to state 48
    scalar                         shift and go to state 30
    flow_collection                shift and go to state 13
    sequence_item                  shift and go to state 4
    map_item                       shift and go to state 5

state 26

    (17) map_item_value -> scalar .

    CAST_TYPE       reduce using rule 17 (map_item_value -> scalar .)
    SCALAR          reduce using rule 17 (map_item_value -> scalar .)
    B_LITERAL_START reduce using rule 17 (map_item_value -> scalar .)
    B_FOLD_START    reduce using rule 17 (map_item_value -> scalar .)
    DOC_START       reduce using rule 17 (map_item_value -> scalar .)
    INDENT          reduce using rule 17 (map_item_value -> scalar .)
    F_SEQUENCE_START reduce using rule 17 (map_item_value -> scalar .)
    F_MAP_START     reduce using rule 17 (map_item_value -> scalar .)
    B_SEQUENCE_START reduce using rule 17 (map_item_value -> scalar .)
    $end            reduce using rule 17 (map_item_value -> scalar .)
    DOC_END         reduce using rule 17 (map_item_value -> scalar .)
    DEDENT          reduce using rule 17 (map_item_value -> scalar .)


state 27

    (16) map_item_value -> flow_collection .

    CAST_TYPE       reduce using rule 16 (map_item_value -> flow_collection .)
    SCALAR          reduce using rule 16 (map_item_value -> flow_collection .)
    B_LITERAL_START reduce using rule 16 (map_item_value -> flow_collection .)
    B_FOLD_START    reduce using rule 16 (map_item_value -> flow_collection .)
    DOC_START       reduce using rule 16 (map_item_value -> flow_collection .)
    INDENT          reduce using rule 16 (map_item_value -> flow_collection .)
    F_SEQUENCE_START reduce using rule 16 (map_item_value -> flow_collection .)
    F_MAP_START     reduce using rule 16 (map_item_value -> flow_collection .)
    B_SEQUENCE_START reduce using rule 16 (map_item_value -> flow_collection .)
    $end            reduce using rule 16 (map_item_value -> flow_collection .)
    DOC_END         reduce using rule 16 (map_item_value -> flow_collection .)
    DEDENT          reduce using rule 16 (map_item_value -> flow_collection .)


state 28

    (13) map_item -> map_item_key map_item_value .

    CAST_TYPE       reduce using rule 13 (map_item -> map_item_key map_item_value .)
    SCALAR          reduce using rule 13 (map_item -> map_item_key map_item_value .)
    B_LITERAL_START reduce using rule 13 (map_item -> map_item_key map_item_value .)
    B_FOLD_START    reduce using rule 13 (map_item -> map_item_key map_item_value .)
    DOC_START       reduce using rule 13 (map_item -> map_item_key map_item_value .)
    INDENT          reduce using rule 13 (map_item -> map_item_key map_item_value .)
    F_SEQUENCE_START reduce using rule 13 (map_item -> map_item_key map_item_value .)
    F_MAP_START     reduce using rule 13 (map_item -> map_item_key map_item_value .)
    B_SEQUENCE_START reduce using rule 13 (map_item -> map_item_key map_item_value .)
    $end            reduce using rule 13 (map_item -> map_item_key map_item_value .)
    DOC_END         reduce using rule 13 (map_item -> map_item_key map_item_value .)
    DEDENT          reduce using rule 13 (map_item -> map_item_key map_item_value .)


state 29

    (12) map -> map map_item .

    CAST_TYPE       reduce using rule 12 (map -> map map_item .)
    SCALAR          reduce using rule 12 (map -> map map_item .)
    B_LITERAL_START reduce using rule 12 (map -> map map_item .)
    B_FOLD_START    reduce using rule 12 (map -> map map_item .)
    DOC_START       reduce using rule 12 (map -> map map_item .)
    INDENT          reduce using rule 12 (map -> map map_item .)
    F_SEQUENCE_START reduce using rule 12 (map -> map map_item .)
    F_MAP_START     reduce using rule 12 (map -> map map_item .)
    B_SEQUENCE_START reduce using rule 12 (map -> map map_item .)
    $end            reduce using rule 12 (map -> map map_item .)
    DOC_END         reduce using rule 12 (map -> map map_item .)
    DEDENT          reduce using rule 12 (map -> map map_item .)


state 30

    (14) map_item_key -> scalar . B_MAP_KEY

    B_MAP_KEY       shift and go to state 23


state 31

    (2) docs -> docs doc .

    DOC_START       reduce using rule 2 (docs -> docs doc .)
    INDENT          reduce using rule 2 (docs -> docs doc .)
    CAST_TYPE       reduce using rule 2 (docs -> docs doc .)
    SCALAR          reduce using rule 2 (docs -> docs doc .)
    B_LITERAL_START reduce using rule 2 (docs -> docs doc .)
    B_FOLD_START    reduce using rule 2 (docs -> docs doc .)
    F_SEQUENCE_START reduce using rule 2 (docs -> docs doc .)
    F_MAP_START     reduce using rule 2 (docs -> docs doc .)
    B_SEQUENCE_START reduce using rule 2 (docs -> docs doc .)
    $end            reduce using rule 2 (docs -> docs doc .)


state 32

    (21) sequence_item -> B_SEQUENCE_START INDENT . collection DEDENT
    (8) collection -> . sequence
    (9) collection -> . map
    (10) collection -> . flow_collection
    (18) sequence -> . sequence_item
    (19) sequence -> . sequence sequence_item
    (11) map -> . map_item
    (12) map -> . map map_item
    (29) flow_collection -> . F_SEQUENCE_START flow_sequence F_SEQUENCE_END
    (30) flow_collection -> . F_MAP_START flow_map F_MAP_END
    (20) sequence_item -> . B_SEQUENCE_START scalar
    (21) sequence_item -> . B_SEQUENCE_START INDENT collection DEDENT
    (22) sequence_item -> . B_SEQUENCE_START flow_collection
    (13) map_item -> . map_item_key map_item_value
    (14) map_item_key -> . scalar B_MAP_KEY
    (23) scalar -> . CAST_TYPE scalar
    (24) scalar -> . SCALAR
    (25) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (26) scalar -> . B_FOLD_START scalar_group B_FOLD_END

    F_SEQUENCE_START shift and go to state 16
    F_MAP_START     shift and go to state 18
    B_SEQUENCE_START shift and go to state 10
    CAST_TYPE       shift and go to state 17
    SCALAR          shift and go to state 12
    B_LITERAL_START shift and go to state 19
    B_FOLD_START    shift and go to state 2

    map                            shift and go to state 8
    sequence                       shift and go to state 1
    map_item_key                   shift and go to state 7
    collection                     shift and go to state 49
    scalar                         shift and go to state 30
    flow_collection                shift and go to state 13
    sequence_item                  shift and go to state 4
    map_item                       shift and go to state 5

state 33

    (20) sequence_item -> B_SEQUENCE_START scalar .

    B_SEQUENCE_START reduce using rule 20 (sequence_item -> B_SEQUENCE_START scalar .)
    DOC_START       reduce using rule 20 (sequence_item -> B_SEQUENCE_START scalar .)
    INDENT          reduce using rule 20 (sequence_item -> B_SEQUENCE_START scalar .)
    CAST_TYPE       reduce using rule 20 (sequence_item -> B_SEQUENCE_START scalar .)
    SCALAR          reduce using rule 20 (sequence_item -> B_SEQUENCE_START scalar .)
    B_LITERAL_START reduce using rule 20 (sequence_item -> B_SEQUENCE_START scalar .)
    B_FOLD_START    reduce using rule 20 (sequence_item -> B_SEQUENCE_START scalar .)
    F_SEQUENCE_START reduce using rule 20 (sequence_item -> B_SEQUENCE_START scalar .)
    F_MAP_START     reduce using rule 20 (sequence_item -> B_SEQUENCE_START scalar .)
    $end            reduce using rule 20 (sequence_item -> B_SEQUENCE_START scalar .)
    DOC_END         reduce using rule 20 (sequence_item -> B_SEQUENCE_START scalar .)
    DEDENT          reduce using rule 20 (sequence_item -> B_SEQUENCE_START scalar .)


state 34

    (22) sequence_item -> B_SEQUENCE_START flow_collection .

    B_SEQUENCE_START reduce using rule 22 (sequence_item -> B_SEQUENCE_START flow_collection .)
    DOC_START       reduce using rule 22 (sequence_item -> B_SEQUENCE_START flow_collection .)
    INDENT          reduce using rule 22 (sequence_item -> B_SEQUENCE_START flow_collection .)
    CAST_TYPE       reduce using rule 22 (sequence_item -> B_SEQUENCE_START flow_collection .)
    SCALAR          reduce using rule 22 (sequence_item -> B_SEQUENCE_START flow_collection .)
    B_LITERAL_START reduce using rule 22 (sequence_item -> B_SEQUENCE_START flow_collection .)
    B_FOLD_START    reduce using rule 22 (sequence_item -> B_SEQUENCE_START flow_collection .)
    F_SEQUENCE_START reduce using rule 22 (sequence_item -> B_SEQUENCE_START flow_collection .)
    F_MAP_START     reduce using rule 22 (sequence_item -> B_SEQUENCE_START flow_collection .)
    $end            reduce using rule 22 (sequence_item -> B_SEQUENCE_START flow_collection .)
    DOC_END         reduce using rule 22 (sequence_item -> B_SEQUENCE_START flow_collection .)
    DEDENT          reduce using rule 22 (sequence_item -> B_SEQUENCE_START flow_collection .)


state 35

    (5) doc -> INDENT doc . DEDENT

    DEDENT          shift and go to state 50


state 36

    (31) flow_sequence -> flow_sequence_item .

    F_SEQUENCE_END  reduce using rule 31 (flow_sequence -> flow_sequence_item .)
    F_SEP           reduce using rule 31 (flow_sequence -> flow_sequence_item .)


state 37

    (33) flow_sequence_item -> scalar .

    F_SEQUENCE_END  reduce using rule 33 (flow_sequence_item -> scalar .)
    F_SEP           reduce using rule 33 (flow_sequence_item -> scalar .)


state 38

    (29) flow_collection -> F_SEQUENCE_START flow_sequence . F_SEQUENCE_END
    (32) flow_sequence -> flow_sequence . F_SEP flow_sequence_item

    F_SEQUENCE_END  shift and go to state 52
    F_SEP           shift and go to state 51


state 39

    (23) scalar -> CAST_TYPE scalar .

    B_MAP_KEY       reduce using rule 23 (scalar -> CAST_TYPE scalar .)
    DOC_START       reduce using rule 23 (scalar -> CAST_TYPE scalar .)
    INDENT          reduce using rule 23 (scalar -> CAST_TYPE scalar .)
    CAST_TYPE       reduce using rule 23 (scalar -> CAST_TYPE scalar .)
    SCALAR          reduce using rule 23 (scalar -> CAST_TYPE scalar .)
    B_LITERAL_START reduce using rule 23 (scalar -> CAST_TYPE scalar .)
    B_FOLD_START    reduce using rule 23 (scalar -> CAST_TYPE scalar .)
    F_SEQUENCE_START reduce using rule 23 (scalar -> CAST_TYPE scalar .)
    F_MAP_START     reduce using rule 23 (scalar -> CAST_TYPE scalar .)
    B_SEQUENCE_START reduce using rule 23 (scalar -> CAST_TYPE scalar .)
    $end            reduce using rule 23 (scalar -> CAST_TYPE scalar .)
    F_MAP_END       reduce using rule 23 (scalar -> CAST_TYPE scalar .)
    F_SEP           reduce using rule 23 (scalar -> CAST_TYPE scalar .)
    DEDENT          reduce using rule 23 (scalar -> CAST_TYPE scalar .)
    DOC_END         reduce using rule 23 (scalar -> CAST_TYPE scalar .)
    F_SEQUENCE_END  reduce using rule 23 (scalar -> CAST_TYPE scalar .)
    F_MAP_KEY       reduce using rule 23 (scalar -> CAST_TYPE scalar .)


state 40

    (30) flow_collection -> F_MAP_START flow_map . F_MAP_END
    (35) flow_map -> flow_map . F_SEP flow_map_item

    F_MAP_END       shift and go to state 54
    F_SEP           shift and go to state 53


state 41

    (34) flow_map -> flow_map_item .

    F_MAP_END       reduce using rule 34 (flow_map -> flow_map_item .)
    F_SEP           reduce using rule 34 (flow_map -> flow_map_item .)


state 42

    (36) flow_map_item -> flow_map_item_key . flow_map_item_value
    (38) flow_map_item_value -> . scalar
    (23) scalar -> . CAST_TYPE scalar
    (24) scalar -> . SCALAR
    (25) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (26) scalar -> . B_FOLD_START scalar_group B_FOLD_END

    CAST_TYPE       shift and go to state 17
    SCALAR          shift and go to state 12
    B_LITERAL_START shift and go to state 19
    B_FOLD_START    shift and go to state 2

    flow_map_item_value            shift and go to state 55
    scalar                         shift and go to state 56

state 43

    (37) flow_map_item_key -> scalar . F_MAP_KEY

    F_MAP_KEY       shift and go to state 57


state 44

    (25) scalar -> B_LITERAL_START scalar_group . B_LITERAL_END
    (28) scalar_group -> scalar_group . SCALAR

    B_LITERAL_END   shift and go to state 58
    SCALAR          shift and go to state 45


state 45

    (28) scalar_group -> scalar_group SCALAR .

    B_FOLD_END      reduce using rule 28 (scalar_group -> scalar_group SCALAR .)
    SCALAR          reduce using rule 28 (scalar_group -> scalar_group SCALAR .)
    B_LITERAL_END   reduce using rule 28 (scalar_group -> scalar_group SCALAR .)


state 46

    (26) scalar -> B_FOLD_START scalar_group B_FOLD_END .

    B_MAP_KEY       reduce using rule 26 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    DOC_START       reduce using rule 26 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    INDENT          reduce using rule 26 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    CAST_TYPE       reduce using rule 26 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    SCALAR          reduce using rule 26 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    B_LITERAL_START reduce using rule 26 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    B_FOLD_START    reduce using rule 26 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    F_SEQUENCE_START reduce using rule 26 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    F_MAP_START     reduce using rule 26 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    B_SEQUENCE_START reduce using rule 26 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    $end            reduce using rule 26 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    F_MAP_END       reduce using rule 26 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    F_SEP           reduce using rule 26 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    DEDENT          reduce using rule 26 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    DOC_END         reduce using rule 26 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    F_SEQUENCE_END  reduce using rule 26 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)
    F_MAP_KEY       reduce using rule 26 (scalar -> B_FOLD_START scalar_group B_FOLD_END .)


state 47

    (3) doc -> DOC_START doc DOC_END .

    DOC_START       reduce using rule 3 (doc -> DOC_START doc DOC_END .)
    INDENT          reduce using rule 3 (doc -> DOC_START doc DOC_END .)
    CAST_TYPE       reduce using rule 3 (doc -> DOC_START doc DOC_END .)
    SCALAR          reduce using rule 3 (doc -> DOC_START doc DOC_END .)
    B_LITERAL_START reduce using rule 3 (doc -> DOC_START doc DOC_END .)
    B_FOLD_START    reduce using rule 3 (doc -> DOC_START doc DOC_END .)
    F_SEQUENCE_START reduce using rule 3 (doc -> DOC_START doc DOC_END .)
    F_MAP_START     reduce using rule 3 (doc -> DOC_START doc DOC_END .)
    B_SEQUENCE_START reduce using rule 3 (doc -> DOC_START doc DOC_END .)
    $end            reduce using rule 3 (doc -> DOC_START doc DOC_END .)
    DOC_END         reduce using rule 3 (doc -> DOC_START doc DOC_END .)
    DEDENT          reduce using rule 3 (doc -> DOC_START doc DOC_END .)


state 48

    (15) map_item_value -> INDENT collection . DEDENT

    DEDENT          shift and go to state 59


state 49

    (21) sequence_item -> B_SEQUENCE_START INDENT collection . DEDENT

    DEDENT          shift and go to state 60


state 50

    (5) doc -> INDENT doc DEDENT .

    DOC_START       reduce using rule 5 (doc -> INDENT doc DEDENT .)
    INDENT          reduce using rule 5 (doc -> INDENT doc DEDENT .)
    CAST_TYPE       reduce using rule 5 (doc -> INDENT doc DEDENT .)
    SCALAR          reduce using rule 5 (doc -> INDENT doc DEDENT .)
    B_LITERAL_START reduce using rule 5 (doc -> INDENT doc DEDENT .)
    B_FOLD_START    reduce using rule 5 (doc -> INDENT doc DEDENT .)
    F_SEQUENCE_START reduce using rule 5 (doc -> INDENT doc DEDENT .)
    F_MAP_START     reduce using rule 5 (doc -> INDENT doc DEDENT .)
    B_SEQUENCE_START reduce using rule 5 (doc -> INDENT doc DEDENT .)
    $end            reduce using rule 5 (doc -> INDENT doc DEDENT .)
    DOC_END         reduce using rule 5 (doc -> INDENT doc DEDENT .)
    DEDENT          reduce using rule 5 (doc -> INDENT doc DEDENT .)


state 51

    (32) flow_sequence -> flow_sequence F_SEP . flow_sequence_item
    (33) flow_sequence_item -> . scalar
    (23) scalar -> . CAST_TYPE scalar
    (24) scalar -> . SCALAR
    (25) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (26) scalar -> . B_FOLD_START scalar_group B_FOLD_END

    CAST_TYPE       shift and go to state 17
    SCALAR          shift and go to state 12
    B_LITERAL_START shift and go to state 19
    B_FOLD_START    shift and go to state 2

    flow_sequence_item             shift and go to state 61
    scalar                         shift and go to state 37

state 52

    (29) flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .

    DOC_START       reduce using rule 29 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    INDENT          reduce using rule 29 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    CAST_TYPE       reduce using rule 29 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    SCALAR          reduce using rule 29 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    B_LITERAL_START reduce using rule 29 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    B_FOLD_START    reduce using rule 29 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    F_SEQUENCE_START reduce using rule 29 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    F_MAP_START     reduce using rule 29 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    B_SEQUENCE_START reduce using rule 29 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    $end            reduce using rule 29 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    DEDENT          reduce using rule 29 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)
    DOC_END         reduce using rule 29 (flow_collection -> F_SEQUENCE_START flow_sequence F_SEQUENCE_END .)


state 53

    (35) flow_map -> flow_map F_SEP . flow_map_item
    (36) flow_map_item -> . flow_map_item_key flow_map_item_value
    (37) flow_map_item_key -> . scalar F_MAP_KEY
    (23) scalar -> . CAST_TYPE scalar
    (24) scalar -> . SCALAR
    (25) scalar -> . B_LITERAL_START scalar_group B_LITERAL_END
    (26) scalar -> . B_FOLD_START scalar_group B_FOLD_END

    CAST_TYPE       shift and go to state 17
    SCALAR          shift and go to state 12
    B_LITERAL_START shift and go to state 19
    B_FOLD_START    shift and go to state 2

    flow_map_item                  shift and go to state 62
    flow_map_item_key              shift and go to state 42
    scalar                         shift and go to state 43

state 54

    (30) flow_collection -> F_MAP_START flow_map F_MAP_END .

    DOC_START       reduce using rule 30 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    INDENT          reduce using rule 30 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    CAST_TYPE       reduce using rule 30 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    SCALAR          reduce using rule 30 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    B_LITERAL_START reduce using rule 30 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    B_FOLD_START    reduce using rule 30 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    F_SEQUENCE_START reduce using rule 30 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    F_MAP_START     reduce using rule 30 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    B_SEQUENCE_START reduce using rule 30 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    $end            reduce using rule 30 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    DEDENT          reduce using rule 30 (flow_collection -> F_MAP_START flow_map F_MAP_END .)
    DOC_END         reduce using rule 30 (flow_collection -> F_MAP_START flow_map F_MAP_END .)


state 55

    (36) flow_map_item -> flow_map_item_key flow_map_item_value .

    F_MAP_END       reduce using rule 36 (flow_map_item -> flow_map_item_key flow_map_item_value .)
    F_SEP           reduce using rule 36 (flow_map_item -> flow_map_item_key flow_map_item_value .)


state 56

    (38) flow_map_item_value -> scalar .

    F_MAP_END       reduce using rule 38 (flow_map_item_value -> scalar .)
    F_SEP           reduce using rule 38 (flow_map_item_value -> scalar .)


state 57

    (37) flow_map_item_key -> scalar F_MAP_KEY .

    CAST_TYPE       reduce using rule 37 (flow_map_item_key -> scalar F_MAP_KEY .)
    SCALAR          reduce using rule 37 (flow_map_item_key -> scalar F_MAP_KEY .)
    B_LITERAL_START reduce using rule 37 (flow_map_item_key -> scalar F_MAP_KEY .)
    B_FOLD_START    reduce using rule 37 (flow_map_item_key -> scalar F_MAP_KEY .)


state 58

    (25) scalar -> B_LITERAL_START scalar_group B_LITERAL_END .

    B_MAP_KEY       reduce using rule 25 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    DOC_START       reduce using rule 25 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    INDENT          reduce using rule 25 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    CAST_TYPE       reduce using rule 25 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    SCALAR          reduce using rule 25 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    B_LITERAL_START reduce using rule 25 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    B_FOLD_START    reduce using rule 25 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    F_SEQUENCE_START reduce using rule 25 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    F_MAP_START     reduce using rule 25 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    B_SEQUENCE_START reduce using rule 25 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    $end            reduce using rule 25 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    F_MAP_END       reduce using rule 25 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    F_SEP           reduce using rule 25 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    DEDENT          reduce using rule 25 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    DOC_END         reduce using rule 25 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    F_SEQUENCE_END  reduce using rule 25 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)
    F_MAP_KEY       reduce using rule 25 (scalar -> B_LITERAL_START scalar_group B_LITERAL_END .)


state 59

    (15) map_item_value -> INDENT collection DEDENT .

    CAST_TYPE       reduce using rule 15 (map_item_value -> INDENT collection DEDENT .)
    SCALAR          reduce using rule 15 (map_item_value -> INDENT collection DEDENT .)
    B_LITERAL_START reduce using rule 15 (map_item_value -> INDENT collection DEDENT .)
    B_FOLD_START    reduce using rule 15 (map_item_value -> INDENT collection DEDENT .)
    DOC_START       reduce using rule 15 (map_item_value -> INDENT collection DEDENT .)
    INDENT          reduce using rule 15 (map_item_value -> INDENT collection DEDENT .)
    F_SEQUENCE_START reduce using rule 15 (map_item_value -> INDENT collection DEDENT .)
    F_MAP_START     reduce using rule 15 (map_item_value -> INDENT collection DEDENT .)
    B_SEQUENCE_START reduce using rule 15 (map_item_value -> INDENT collection DEDENT .)
    $end            reduce using rule 15 (map_item_value -> INDENT collection DEDENT .)
    DOC_END         reduce using rule 15 (map_item_value -> INDENT collection DEDENT .)
    DEDENT          reduce using rule 15 (map_item_value -> INDENT collection DEDENT .)


state 60

    (21) sequence_item -> B_SEQUENCE_START INDENT collection DEDENT .

    B_SEQUENCE_START reduce using rule 21 (sequence_item -> B_SEQUENCE_START INDENT collection DEDENT .)
    DOC_START       reduce using rule 21 (sequence_item -> B_SEQUENCE_START INDENT collection DEDENT .)
    INDENT          reduce using rule 21 (sequence_item -> B_SEQUENCE_START INDENT collection DEDENT .)
    CAST_TYPE       reduce using rule 21 (sequence_item -> B_SEQUENCE_START INDENT collection DEDENT .)
    SCALAR          reduce using rule 21 (sequence_item -> B_SEQUENCE_START INDENT collection DEDENT .)
    B_LITERAL_START reduce using rule 21 (sequence_item -> B_SEQUENCE_START INDENT collection DEDENT .)
    B_FOLD_START    reduce using rule 21 (sequence_item -> B_SEQUENCE_START INDENT collection DEDENT .)
    F_SEQUENCE_START reduce using rule 21 (sequence_item -> B_SEQUENCE_START INDENT collection DEDENT .)
    F_MAP_START     reduce using rule 21 (sequence_item -> B_SEQUENCE_START INDENT collection DEDENT .)
    $end            reduce using rule 21 (sequence_item -> B_SEQUENCE_START INDENT collection DEDENT .)
    DOC_END         reduce using rule 21 (sequence_item -> B_SEQUENCE_START INDENT collection DEDENT .)
    DEDENT          reduce using rule 21 (sequence_item -> B_SEQUENCE_START INDENT collection DEDENT .)


state 61

    (32) flow_sequence -> flow_sequence F_SEP flow_sequence_item .

    F_SEQUENCE_END  reduce using rule 32 (flow_sequence -> flow_sequence F_SEP flow_sequence_item .)
    F_SEP           reduce using rule 32 (flow_sequence -> flow_sequence F_SEP flow_sequence_item .)


state 62

    (35) flow_map -> flow_map F_SEP flow_map_item .

    F_MAP_END       reduce using rule 35 (flow_map -> flow_map F_SEP flow_map_item .)
    F_SEP           reduce using rule 35 (flow_map -> flow_map F_SEP flow_map_item .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for B_SEQUENCE_START in state 1 resolved as shift
WARNING: shift/reduce conflict for CAST_TYPE in state 8 resolved as shift
WARNING: shift/reduce conflict for SCALAR in state 8 resolved as shift
WARNING: shift/reduce conflict for B_LITERAL_START in state 8 resolved as shift
WARNING: shift/reduce conflict for B_FOLD_START in state 8 resolved as shift
WARNING: shift/reduce conflict for DOC_END in state 24 resolved as shift
